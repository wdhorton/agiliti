'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function isRawType(value) {
    var type = typeof value;
    return type === 'string' || type === 'number' || type === 'boolean' || type === 'undefined' || value === null;
}

var DefaultOptions = {
    concatTextContent: false
};

function convertValueTypeToString(value) {

    if (typeof value === 'string') {
        // Common case can be fasttracked
        return value;
    }

    if (value === null || value === undefined) {
        return '';
    }

    return '' + value;
}

function concatenateStringChildren(accum, value) {
    if (isRawType(value) && accum.length && isRawType(accum[accum.length - 1])) {
        accum[accum.length - 1] = convertValueTypeToString(accum[accum.length - 1]) + convertValueTypeToString(value);
        return accum;
    }
    accum.push(value);
    return accum;
}

function isValidChild(child) {
    var typeofChild = typeof child;
    return typeofChild === 'string' || typeofChild === 'number' || typeofChild === 'function' || typeof child === 'object' && child !== null;
}

var ReactElementAdapter = (function () {
    function ReactElementAdapter(options) {
        _classCallCheck(this, ReactElementAdapter);

        this._options = (0, _objectAssign2['default'])({}, DefaultOptions, options);
    }

    _createClass(ReactElementAdapter, [{
        key: 'getName',
        value: function getName(element) {
            if (typeof element.type === 'string') {
                return element.type;
            }

            return element.type.displayName || element.type.name || 'no-display-name';
        }
    }, {
        key: 'getAttributes',
        value: function getAttributes(element) {

            var realProps = {};
            if (element.props) {
                for (var key in element.props) {
                    if (key !== 'children') {
                        realProps[key] = element.props[key];
                    }
                }
            }

            if (this._options.includeKeyProp && element.key) {
                realProps.key = element.key;
            }

            if (this._options.includeRefProp && element.ref) {
                realProps.ref = element.ref;
            }

            return realProps;
        }
    }, {
        key: 'getChildren',
        value: function getChildren(element) {

            var childrenArray = [];

            // This is not using React.Children.forEach / map / toArray because it drops invalid children,
            // which would be fine, but we want to explicitly include the `expect.it()` function as a valid child
            // to enable inline assertions
            // This mirrors the React.Children.forEach logic, as seen at
            // https://github.com/facebook/react/blob/35962a00084382b49d1f9e3bd36612925f360e5b/src/shared/utils/traverseAllChildren.js
            // with the exception that we remove the nulls
            // Basically strings & numbers && elements are allowed (elements classed as objects & functions for simplicity)
            if (Array.isArray(element.props.children)) {
                childrenArray = childrenArray.concat(element.props.children).filter(function (child) {
                    return isValidChild(child);
                });
            } else if (isValidChild(element.props.children)) {

                childrenArray = [element.props.children];
            }

            if (this._options.convertToString || this._options.convertMultipleRawToStrings && childrenArray.length > 1) {
                childrenArray = childrenArray.reduce(function (agg, child) {
                    if (child !== null && child !== undefined && isRawType(child)) {
                        child = convertValueTypeToString(child);
                    }
                    agg.push(child);
                    return agg;
                }, []);
            }

            if (this._options.concatTextContent) {
                childrenArray = childrenArray.reduce(concatenateStringChildren, []);
            }

            return childrenArray;
        }
    }, {
        key: 'setOptions',
        value: function setOptions(newOptions) {

            this._options = (0, _objectAssign2['default'])({}, this._options, newOptions);
        }
    }, {
        key: 'getOptions',
        value: function getOptions() {
            return this._options;
        }
    }]);

    return ReactElementAdapter;
})();

exports['default'] = ReactElementAdapter;
module.exports = exports['default'];
//# sourceMappingURL=ReactElementAdapter.js.map