'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _arrayChangesAsync = require('array-changes-async');

var _arrayChangesAsync2 = _interopRequireDefault(_arrayChangesAsync);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _isNativeType = require('./isNativeType');

var _isNativeType2 = _interopRequireDefault(_isNativeType);

var _convertToDiff = require('./convertToDiff');

var _convertToDiff2 = _interopRequireDefault(_convertToDiff);

var _lineBreaker = require('./lineBreaker');

var _lineBreaker2 = _interopRequireDefault(_lineBreaker);

var _Weights = require('./Weights');

var _Weights2 = _interopRequireDefault(_Weights);

// Weightings for diff heuristics

var DefaultWeights = {
    OK: 0, // Only here as a convenience for tests, WEIGHT_OK is used as the constant
    NATIVE_NONNATIVE_MISMATCH: 15,
    NAME_MISMATCH: 10,
    ATTRIBUTE_MISMATCH: 2,
    ATTRIBUTE_MISSING: 2,
    ATTRIBUTE_EXTRA: 1, // Actual contains an attribute that is not expected
    STRING_CONTENT_MISMATCH: 3,
    CONTENT_TYPE_MISMATCH: 1,
    CHILD_MISSING: 2,
    CHILD_INSERTED: 2,
    WRAPPER_REMOVED: 3,
    ALL_CHILDREN_MISSING: 8 // When the expected has children, and actual has no children
    // This + CHILD_MISSING should be equal or greater than NAME_MISMATCH
    // to avoid a name-changed child causing the actual rendered child to
    // be identified as a wrapper, and the actual child as a missing child
    // of the wrapper (see the test
    // "doesn't wrap an element when it means there are missing children"
    // for an example)
};

var defaultOptions = {
    diffExtraAttributes: true,
    diffRemovedAttributes: true,
    diffExtraChildren: true,
    diffMissingChildren: true,
    diffWrappers: true
};

var WEIGHT_OK = 0;

function diffElements(actualAdapter, expectedAdapter, actual, expected, expect, options) {

    options = (0, _objectAssign2['default'])({}, defaultOptions, options);
    options.weights = (0, _objectAssign2['default'])({}, DefaultWeights, options.weights);

    return diffElementOrWrapper(actualAdapter, expectedAdapter, actual, expected, expect, options).then(function (diffResult) {
        return {
            diff: diffResult.diff,
            weight: diffResult.weight.real
        };
    });
}

function diffElementOrWrapper(actualAdapter, expectedAdapter, actual, expected, expect, options) {

    var elementResult = diffElement(actualAdapter, expectedAdapter, actual, expected, expect, options);

    return elementResult.then(function (diffResult) {

        if (diffResult.weight.real !== WEIGHT_OK && !(0, _isNativeType2['default'])(actual)) {

            var actualChildren = actualAdapter.getChildren(actual);

            if (actualChildren.length === 1) {
                // Try as wrapper
                return diffElementOrWrapper(actualAdapter, expectedAdapter, actualChildren[0], expected, expect, options).then(function (wrapperResult) {

                    var wrapperWeight = options.diffWrappers ? options.weights.WRAPPER_REMOVED : WEIGHT_OK;
                    if (wrapperWeight + wrapperResult.weight.real < diffResult.weight.real) {
                        // It is (better as) a wrapper.
                        diffResult = {
                            diff: (0, _convertToDiff2['default'])(actualAdapter, actual, { includeChildren: false }),
                            weight: wrapperResult.weight.addTotal(options.weights.WRAPPER_REMOVED)
                        };
                        if (options.diffWrappers) {
                            diffResult.diff.diff = {
                                type: 'wrapper'
                            };
                            diffResult.weight.addReal(options.weights.WRAPPER_REMOVED);
                        } else {
                            diffResult.diff.type = 'WRAPPERELEMENT';
                        }

                        diffResult.diff.children = [wrapperResult.diff];
                    }
                    return diffResult;
                });
            }
        }

        return diffResult;
    });
}

function diffElement(actualAdapter, expectedAdapter, actual, expected, expect, options) {

    var weights = new _Weights2['default']();
    var diffResult = {};

    var actualIsNative = (0, _isNativeType2['default'])(actual);
    var expectedIsNative = (0, _isNativeType2['default'])(expected);

    var promises = [];

    if (expectedIsNative && typeof expected === 'function' && expected._expectIt) {
        var withErrorResult = expect.withError(function () {
            return expected(actual);
        }, function (e) {

            diffResult.type = 'CONTENT';
            diffResult.value = actual;
            diffResult.diff = {
                type: 'custom',
                assertion: expected,
                error: e
            };
            weights.add(options.weights.STRING_CONTENT_MISMATCH);
            return {
                diff: diffResult,
                weight: weights
            };
        }).then(function () {

            diffResult.type = 'CONTENT';
            diffResult.value = actual;
            // Assertion passed
            return {
                diff: diffResult,
                weight: weights
            };
        });

        if (withErrorResult) {
            return withErrorResult;
        }

        return expect.promise.resolve({ diffResult: diffResult, weights: weights });
    }

    if (actualIsNative && expectedIsNative) {

        diffResult.type = 'CONTENT';
        diffResult.value = actual;

        if (actual !== expected) {
            diffResult.diff = {
                type: 'changed',
                expectedValue: expected
            };
            if ('' + actual !== '' + expected) {
                weights.add(options.weights.STRING_CONTENT_MISMATCH);
            } else {
                weights.add(options.weights.CONTENT_TYPE_MISMATCH);
            }
        }

        return expect.promise.resolve({
            diff: diffResult,
            weight: weights
        });
    }

    if (actualIsNative && !expectedIsNative) {
        weights.add(options.weights.NATIVE_NONNATIVE_MISMATCH);
        diffResult.type = 'CONTENT';
        diffResult.value = actual;
        diffResult.diff = {
            type: 'contentElementMismatch',
            expected: (0, _convertToDiff2['default'])(expectedAdapter, expected)
        };

        return expect.promise.resolve({
            diff: diffResult,
            weight: weights
        });
    }

    if (!actualIsNative && expectedIsNative) {
        weights.add(options.weights.NATIVE_NONNATIVE_MISMATCH);
        diffResult = (0, _convertToDiff2['default'])(actualAdapter, actual);
        diffResult.diff = {
            type: 'elementContentMismatch',
            expected: (0, _convertToDiff2['default'])(expectedAdapter, expected)
        };

        return expect.promise.resolve({
            diff: diffResult,
            weight: weights
        });
    }

    var actualName = actualAdapter.getName(actual);
    var expectedName = expectedAdapter.getName(expected);

    diffResult.type = 'ELEMENT';
    diffResult.name = actualName;

    if (actualName !== expectedName) {
        diffResult.diff = {
            type: 'differentElement',
            expectedName: expectedName
        };
        weights.add(options.weights.NAME_MISMATCH);
    }

    var attributesResultPromise = diffAttributes(actualAdapter.getAttributes(actual), expectedAdapter.getAttributes(expected), expect, options).then(function (attribResult) {
        diffResult.attributes = attribResult.diff;
        weights.addWeight(attribResult.weight);
    });

    promises.push(attributesResultPromise);

    var contentResultPromise = diffContent(actualAdapter, expectedAdapter, actualAdapter.getChildren(actual), expectedAdapter.getChildren(expected), expect, options).then(function (contentResult) {

        diffResult.children = contentResult.diff;
        weights.addWeight(contentResult.weight);
    });

    promises.push(contentResultPromise);

    return expect.promise.all(promises).then(function () {

        return {
            diff: diffResult,
            weight: weights
        };
    });
}

function diffAttributes(actualAttributes, expectedAttributes, expect, options) {

    var diffWeights = new _Weights2['default']();
    var diffResult = [];

    var promises = [];

    Object.keys(actualAttributes).forEach(function (attrib) {

        var attribResult = { name: attrib, value: actualAttributes[attrib] };
        diffResult.push(attribResult);

        if (expectedAttributes.hasOwnProperty(attrib)) {
            (function () {
                var expectedAttrib = expectedAttributes[attrib];
                if (typeof expectedAttrib === 'function' && expectedAttrib._expectIt) {
                    // This is an assertion in the form of expect.it(...)
                    var withErrorResult = expect.withError(function () {
                        return expectedAttrib(actualAttributes[attrib]);
                    }, function (e) {

                        attribResult.diff = {
                            type: 'custom',
                            assertion: expectedAttrib,
                            error: e
                        };

                        diffWeights.add(options.weights.ATTRIBUTE_MISMATCH);
                    });

                    promises.push(withErrorResult);
                } else if (!expect.equal(actualAttributes[attrib], expectedAttributes[attrib])) {
                    diffWeights.add(options.weights.ATTRIBUTE_MISMATCH);
                    attribResult.diff = {
                        type: 'changed',
                        expectedValue: expectedAttributes[attrib]
                    };
                }
            })();
        } else {
            if (options.diffExtraAttributes) {
                diffWeights.addReal(options.weights.ATTRIBUTE_EXTRA);
                attribResult.diff = {
                    type: 'extra'
                };
            }

            diffWeights.addTotal(options.weights.ATTRIBUTE_EXTRA);
        }
    });

    Object.keys(expectedAttributes).forEach(function (attrib) {

        if (!actualAttributes.hasOwnProperty(attrib)) {
            if (options.diffRemovedAttributes) {
                diffWeights.addReal(options.weights.ATTRIBUTE_MISSING);
                var attribResult = {
                    name: attrib,
                    diff: {
                        type: 'missing',
                        expectedValue: expectedAttributes[attrib]
                    }
                };
                diffResult.push(attribResult);
            }
            diffWeights.addTotal(options.weights.ATTRIBUTE_MISSING);
        }
    });

    if (promises.length) {
        return expect.promise.all(promises).then(function () {
            return {
                diff: diffResult,
                weight: diffWeights
            };
        });
    } else {
        return expect.promise(function (resolve, reject) {
            return resolve({
                diff: diffResult,
                weight: diffWeights
            });
        });
    }
}

function diffContent(actualAdapter, expectedAdapter, actual, expected, expect, options) {

    var bestWeight = null;
    var bestDiff = null;

    // Optimize the common case of being exactly one child, ie. an element wrapping something
    // Removed for now, to make this function slightly easier to convert to promises!
    //if (actual.length === 1 && expected.length === 1) {
    //    // It's a single element, then just directly compare the elements
    //    previousStepPromise = diffElement(actualAdapter, expectedAdapter, actual[0], expected[0], expect, options)
    //    .then(singleElementDiff => {
    //        bestDiff = [singleElementDiff.diff];
    //        bestWeight = singleElementDiff.weight;
    //    });
    //}

    return diffChildren(actualAdapter, expectedAdapter, actual, expected, expect, options).then(function (childrenResult) {

        if (!bestWeight || childrenResult.weight.real < bestWeight.real) {
            bestDiff = childrenResult.diff;
            bestWeight = childrenResult.weight;
        }
    }).then(function () {

        if ((!bestWeight || bestWeight.real !== WEIGHT_OK) && actual.length === 1 && expected.length !== 0 && !(0, _isNativeType2['default'])(actual[0])) {
            // Try it as a wrapper, and see if it's better
            // Also covered here is a wrapper around several children

            var actualChildren = actualAdapter.getChildren(actual[0]);
            return diffContent(actualAdapter, expectedAdapter, actualChildren, expected, expect, options);
        }

        return null;
    }).then(function (wrapperResult) {

        if (wrapperResult) {
            var wrapperWeight = options.diffWrappers ? options.weights.WRAPPER_REMOVED : WEIGHT_OK;

            if (!bestWeight || wrapperWeight + wrapperResult.weight.real < bestWeight.real) {
                // It could be a wrapper
                bestWeight = wrapperResult.weight;
                bestWeight.addTotal(options.weights.WRAPPER_REMOVED);
                var actualDiff = (0, _convertToDiff2['default'])(actualAdapter, actual[0], { includeChildren: false });
                actualDiff.children = wrapperResult.diff;
                if (options.diffWrappers) {
                    actualDiff.diff = {
                        type: 'wrapper'
                    };
                    bestWeight.addReal(options.weights.WRAPPER_REMOVED);
                } else {
                    actualDiff.type = 'WRAPPERELEMENT';
                }
                bestDiff = [actualDiff];
            }
        }
    }).then(function () {
        return {
            diff: bestDiff,
            weight: bestWeight
        };
    });
}

function diffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options) {

    var onlyExact = true;
    var bestDiffResult = null;

    return tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExact).then(function (exactDiffResult) {

        bestDiffResult = exactDiffResult;

        // If it wasn't a perfect match, and there were both inserts and removals, we can try allowing the children that
        // don't match to be "similar".
        if (exactDiffResult.weight.real !== 0 && exactDiffResult.insertCount && exactDiffResult.removeCount) {
            onlyExact = false;
            return tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExact);
        }
        return null;
    }).then(function (changesDiffResult) {

        if (changesDiffResult && changesDiffResult.weight.real < bestDiffResult.weight.real) {
            bestDiffResult = changesDiffResult;
        }
        return bestDiffResult;
    });
}

function tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExactMatches) {

    var diffWeights = new _Weights2['default']();
    var diffResult = [];

    var insertCount = 0;
    var removeCount = 0;
    var changeCount = 0;
    var promises = [];

    return expect.promise(function (resolve, reject) {
        (0, _arrayChangesAsync2['default'])(actualChildren, expectedChildren, function (a, b, aIndex, bIndex, callback) {
            diffElementOrWrapper(actualAdapter, expectedAdapter, a, b, expect, options).then(function (elementDiff) {
                return callback(elementDiff.weight.total === WEIGHT_OK);
            });
        }, function (a, b, aIndex, bIndex, callback) {

            if (onlyExactMatches) {
                return callback(false);
            }
            var aIsNativeType = (0, _isNativeType2['default'])(a);
            var bIsNativeType = (0, _isNativeType2['default'])(b);

            // If they're native types, assume they're similar
            if (aIsNativeType && bIsNativeType) {
                return callback(true);
            }

            // If one is an element, then don't count them as "similar"
            if (aIsNativeType !== bIsNativeType) {
                return callback(false);
            }

            // Here we could diff and get a weight, but the weight as to what is similar is dependant on
            // what the other "similar" elements got, so we'll just take a simplistic view -
            // elements with the same name are similar, otherwise they're not
            return callback(actualAdapter.getName(a) === expectedAdapter.getName(b));
        }, function (changes) {

            changes.forEach(function (diffItem) {

                var itemResult = undefined;

                switch (diffItem.type) {
                    case 'insert':
                        insertCount++;
                        itemResult = (0, _convertToDiff2['default'])(expectedAdapter, diffItem.value);
                        if (options.diffMissingChildren) {
                            diffWeights.add(options.weights.CHILD_MISSING);
                            itemResult.diff = {
                                type: 'missing'
                            };
                            diffResult.push(itemResult);
                        }
                        break;

                    case 'remove':
                        removeCount++;
                        itemResult = (0, _convertToDiff2['default'])(actualAdapter, diffItem.value);

                        if (options.diffExtraChildren) {
                            itemResult.diff = {
                                type: 'extra'
                            };
                            diffWeights.addReal(options.weights.CHILD_INSERTED);
                        }
                        diffWeights.addTotal(options.weights.CHILD_INSERTED);
                        diffResult.push(itemResult);
                        break;

                    case 'similar':
                        changeCount++;
                    // fallthrough
                    // (equal needs to be diffed, because it may contain wrappers, hence we need to work that out.. again)
                    // It would be good to cache that, from the diff above.

                    case 'equal': //eslint-disable-line no-fallthrough
                    default:
                        var index = diffResult.length;

                        diffResult.push({}); // Push a placeholder, we'll replace when the promise resolves
                        var promise = diffElementOrWrapper(actualAdapter, expectedAdapter, diffItem.value, diffItem.expected, expect, options).then(function (result) {
                            diffResult[index] = result.diff;
                            diffWeights.addWeight(result.weight);
                        });
                        promises.push(promise);

                        break;
                }
            });

            if (promises.length) {
                return expect.promise.all(promises).then(function () {
                    resolve();
                });
            }
            return resolve();
        });
    }).then(function () {

        if (actualChildren.length === 0 && expectedChildren.length !== 0 && options.diffMissingChildren) {
            diffWeights.add(options.weights.ALL_CHILDREN_MISSING);
        }

        return {
            weight: diffWeights,
            diff: diffResult,
            insertCount: insertCount,
            removeCount: removeCount,
            changeCount: changeCount
        };
    });
}

exports['default'] = {
    DefaultWeights: DefaultWeights,
    diffElements: diffElements
};
module.exports = exports['default'];
//# sourceMappingURL=diff.js.map