{"version":3,"sources":["../src/diff.js"],"names":[],"mappings":"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","file":"diff.js","sourcesContent":["import ArrayChangesAsync from 'array-changes-async';\nimport ObjectAssign from 'object-assign';\nimport isNativeType from './isNativeType';\nimport convertToDiff from './convertToDiff';\nimport LineBreaker from './lineBreaker';\nimport Weights from './Weights';\n\n// Weightings for diff heuristics\n\nconst DefaultWeights = {\n    OK: 0,                  // Only here as a convenience for tests, WEIGHT_OK is used as the constant\n    NATIVE_NONNATIVE_MISMATCH: 15,\n    NAME_MISMATCH: 10,\n    ATTRIBUTE_MISMATCH: 2,\n    ATTRIBUTE_MISSING: 2,\n    ATTRIBUTE_EXTRA: 1,     // Actual contains an attribute that is not expected\n    STRING_CONTENT_MISMATCH: 3,\n    CONTENT_TYPE_MISMATCH: 1,\n    CHILD_MISSING: 2,\n    CHILD_INSERTED: 2,\n    WRAPPER_REMOVED: 3,\n    ALL_CHILDREN_MISSING: 8  // When the expected has children, and actual has no children\n                             // This + CHILD_MISSING should be equal or greater than NAME_MISMATCH\n                             // to avoid a name-changed child causing the actual rendered child to\n                             // be identified as a wrapper, and the actual child as a missing child\n                             // of the wrapper (see the test\n                             // \"doesn't wrap an element when it means there are missing children\"\n                             // for an example)\n};\n\nconst defaultOptions = {\n    diffExtraAttributes: true,\n    diffRemovedAttributes: true,\n    diffExtraChildren: true,\n    diffMissingChildren: true,\n    diffWrappers: true\n};\n\nconst WEIGHT_OK = 0;\n\nfunction diffElements(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    options = ObjectAssign({}, defaultOptions, options);\n    options.weights = ObjectAssign({}, DefaultWeights, options.weights);\n\n    return diffElementOrWrapper(actualAdapter, expectedAdapter, actual, expected, expect, options)\n        .then(diffResult => {\n            return {\n                diff: diffResult.diff,\n                weight: diffResult.weight.real\n            };\n        });\n}\n\nfunction diffElementOrWrapper(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    const elementResult = diffElement(actualAdapter, expectedAdapter, actual, expected, expect, options);\n\n    return elementResult\n        .then(diffResult => {\n\n            if (diffResult.weight.real !== WEIGHT_OK && !isNativeType(actual)) {\n\n                const actualChildren = actualAdapter.getChildren(actual);\n\n                if (actualChildren.length === 1) {\n                    // Try as wrapper\n                    return diffElementOrWrapper(actualAdapter, expectedAdapter, actualChildren[0], expected, expect, options)\n                        .then(wrapperResult => {\n\n                            const wrapperWeight = options.diffWrappers ? options.weights.WRAPPER_REMOVED : WEIGHT_OK;\n                            if ((wrapperWeight + wrapperResult.weight.real) < diffResult.weight.real) {\n                                // It is (better as) a wrapper.\n                                diffResult = {\n                                    diff: convertToDiff(actualAdapter, actual, { includeChildren: false }),\n                                    weight: wrapperResult.weight.addTotal(options.weights.WRAPPER_REMOVED)\n                                };\n                                if (options.diffWrappers) {\n                                    diffResult.diff.diff = {\n                                        type: 'wrapper'\n                                    };\n                                    diffResult.weight.addReal(options.weights.WRAPPER_REMOVED);\n                                } else {\n                                    diffResult.diff.type = 'WRAPPERELEMENT';\n                                }\n\n                                diffResult.diff.children = [wrapperResult.diff];\n                            }\n                            return diffResult;\n                        });\n                }\n\n            }\n\n\n            return diffResult;\n    });\n\n}\n\n\nfunction diffElement(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    const weights = new Weights();\n    let diffResult = {};\n\n    const actualIsNative = isNativeType(actual);\n    const expectedIsNative = isNativeType(expected);\n\n    const promises = [];\n\n    if (expectedIsNative && typeof expected === 'function' && expected._expectIt) {\n        const withErrorResult = expect.withError(() => expected(actual), e => {\n\n            diffResult.type = 'CONTENT';\n            diffResult.value = actual;\n            diffResult.diff = {\n                type: 'custom',\n                assertion: expected,\n                error: e\n            };\n            weights.add(options.weights.STRING_CONTENT_MISMATCH);\n            return {\n                diff: diffResult,\n                weight: weights\n            };\n        }).then(() => {\n\n            diffResult.type = 'CONTENT';\n            diffResult.value = actual;\n            // Assertion passed\n            return {\n                diff: diffResult,\n                weight: weights\n            };\n        });\n\n        if (withErrorResult) {\n            return withErrorResult;\n        }\n\n        return expect.promise.resolve({ diffResult, weights });\n\n    }\n\n    if (actualIsNative && expectedIsNative) {\n\n        diffResult.type = 'CONTENT';\n        diffResult.value = actual;\n\n        if (actual !== expected) {\n            diffResult.diff = {\n                type: 'changed',\n                expectedValue: expected\n            };\n            if ('' + actual !== '' + expected) {\n                weights.add(options.weights.STRING_CONTENT_MISMATCH);\n            } else {\n                weights.add(options.weights.CONTENT_TYPE_MISMATCH);\n            }\n        }\n\n        return expect.promise.resolve({\n            diff: diffResult,\n            weight: weights\n        });\n    }\n\n    if (actualIsNative && !expectedIsNative) {\n        weights.add(options.weights.NATIVE_NONNATIVE_MISMATCH);\n        diffResult.type = 'CONTENT';\n        diffResult.value = actual;\n        diffResult.diff = {\n            type: 'contentElementMismatch',\n            expected: convertToDiff(expectedAdapter, expected)\n        };\n\n        return expect.promise.resolve({\n            diff: diffResult,\n            weight: weights\n        });\n    }\n\n    if (!actualIsNative && expectedIsNative) {\n        weights.add(options.weights.NATIVE_NONNATIVE_MISMATCH);\n        diffResult = convertToDiff(actualAdapter, actual);\n        diffResult.diff = {\n            type: 'elementContentMismatch',\n            expected: convertToDiff(expectedAdapter, expected)\n        };\n\n        return expect.promise.resolve({\n            diff: diffResult,\n            weight: weights\n        });\n    }\n\n    const actualName = actualAdapter.getName(actual);\n    const expectedName = expectedAdapter.getName(expected);\n\n\n    diffResult.type = 'ELEMENT';\n    diffResult.name = actualName;\n\n    if (actualName !== expectedName) {\n        diffResult.diff = {\n            type: 'differentElement',\n            expectedName: expectedName\n        };\n        weights.add(options.weights.NAME_MISMATCH);\n    }\n\n    const attributesResultPromise = diffAttributes(actualAdapter.getAttributes(actual), expectedAdapter.getAttributes(expected), expect, options)\n            .then(attribResult => {\n                diffResult.attributes = attribResult.diff;\n                weights.addWeight(attribResult.weight);\n            });\n\n    promises.push(attributesResultPromise);\n\n\n    const contentResultPromise = diffContent(actualAdapter, expectedAdapter, actualAdapter.getChildren(actual), expectedAdapter.getChildren(expected), expect, options)\n        .then(contentResult => {\n\n            diffResult.children = contentResult.diff;\n            weights.addWeight(contentResult.weight);\n        });\n\n    promises.push(contentResultPromise);\n\n\n    return expect.promise.all(promises).then(() => {\n\n        return {\n            diff: diffResult,\n            weight: weights\n        };\n    });\n\n\n}\n\nfunction diffAttributes(actualAttributes, expectedAttributes, expect, options) {\n\n    let diffWeights = new Weights();\n    const diffResult = [];\n\n\n\n    const promises = [];\n\n    Object.keys(actualAttributes).forEach(attrib => {\n\n        const attribResult = { name: attrib, value: actualAttributes[attrib] };\n        diffResult.push(attribResult);\n\n        if (expectedAttributes.hasOwnProperty(attrib)) {\n            const expectedAttrib = expectedAttributes[attrib];\n            if (typeof expectedAttrib === 'function' && expectedAttrib._expectIt) {\n                // This is an assertion in the form of expect.it(...)\n                const withErrorResult = expect.withError(() => expectedAttrib(actualAttributes[attrib]), e => {\n\n                    attribResult.diff = {\n                        type: 'custom',\n                        assertion: expectedAttrib,\n                        error: e\n                    };\n\n                    diffWeights.add(options.weights.ATTRIBUTE_MISMATCH);\n                });\n\n                promises.push(withErrorResult);\n\n            } else if (!expect.equal(actualAttributes[attrib], expectedAttributes[attrib])) {\n                diffWeights.add(options.weights.ATTRIBUTE_MISMATCH);\n                attribResult.diff = {\n                    type: 'changed',\n                    expectedValue: expectedAttributes[attrib]\n                };\n            }\n        } else {\n            if (options.diffExtraAttributes) {\n                diffWeights.addReal(options.weights.ATTRIBUTE_EXTRA);\n                attribResult.diff = {\n                    type: 'extra'\n                };\n            }\n\n            diffWeights.addTotal(options.weights.ATTRIBUTE_EXTRA);\n        }\n    });\n\n    Object.keys(expectedAttributes).forEach(attrib => {\n\n        if (!actualAttributes.hasOwnProperty(attrib)) {\n            if (options.diffRemovedAttributes) {\n                diffWeights.addReal(options.weights.ATTRIBUTE_MISSING);\n                const attribResult = {\n                    name: attrib,\n                    diff: {\n                        type: 'missing',\n                        expectedValue: expectedAttributes[attrib]\n                    }\n                };\n                diffResult.push(attribResult);\n            }\n            diffWeights.addTotal(options.weights.ATTRIBUTE_MISSING);\n        }\n    });\n\n    if (promises.length) {\n        return expect.promise.all(promises)\n            .then(() => {\n                return {\n                    diff: diffResult,\n                    weight: diffWeights\n                };\n            });\n    } else {\n        return expect.promise((resolve, reject) => {\n            return resolve({\n                diff: diffResult,\n                weight: diffWeights\n            });\n        });\n    }\n\n\n}\n\nfunction diffContent(actualAdapter, expectedAdapter, actual, expected, expect, options) {\n\n    let bestWeight = null;\n    let bestDiff = null;\n\n    // Optimize the common case of being exactly one child, ie. an element wrapping something\n    // Removed for now, to make this function slightly easier to convert to promises!\n    //if (actual.length === 1 && expected.length === 1) {\n    //    // It's a single element, then just directly compare the elements\n    //    previousStepPromise = diffElement(actualAdapter, expectedAdapter, actual[0], expected[0], expect, options)\n    //    .then(singleElementDiff => {\n    //        bestDiff = [singleElementDiff.diff];\n    //        bestWeight = singleElementDiff.weight;\n    //    });\n    //}\n\n    return diffChildren(actualAdapter, expectedAdapter, actual, expected, expect, options).then(childrenResult => {\n\n        if (!bestWeight || childrenResult.weight.real < bestWeight.real) {\n            bestDiff = childrenResult.diff;\n            bestWeight = childrenResult.weight;\n        }\n    }).then(() => {\n\n\n        if ((!bestWeight || bestWeight.real !== WEIGHT_OK) &&\n            actual.length === 1 &&\n            expected.length !== 0 && !isNativeType(actual[0])) {\n            // Try it as a wrapper, and see if it's better\n            // Also covered here is a wrapper around several children\n\n            const actualChildren = actualAdapter.getChildren(actual[0]);\n            return diffContent(actualAdapter, expectedAdapter, actualChildren, expected, expect, options);\n        }\n\n        return null;\n\n    }).then(wrapperResult => {\n\n        if (wrapperResult) {\n            const wrapperWeight = options.diffWrappers ? options.weights.WRAPPER_REMOVED : WEIGHT_OK;\n\n            if (!bestWeight || (wrapperWeight + wrapperResult.weight.real) < bestWeight.real) {\n                // It could be a wrapper\n                bestWeight = wrapperResult.weight;\n                bestWeight.addTotal(options.weights.WRAPPER_REMOVED);\n                const actualDiff = convertToDiff(actualAdapter, actual[0], { includeChildren: false });\n                actualDiff.children = wrapperResult.diff;\n                if (options.diffWrappers) {\n                    actualDiff.diff = {\n                        type: 'wrapper'\n                    };\n                    bestWeight.addReal(options.weights.WRAPPER_REMOVED);\n                } else {\n                    actualDiff.type = 'WRAPPERELEMENT';\n                }\n                bestDiff = [actualDiff];\n            }\n        }\n    }).then(() => {\n        return {\n            diff: bestDiff,\n            weight: bestWeight\n        };\n    });\n\n}\n\n\n\nfunction diffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options) {\n\n\n    let onlyExact = true;\n    let bestDiffResult = null;\n\n\n    return tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExact)\n        .then(exactDiffResult => {\n\n            bestDiffResult = exactDiffResult;\n\n            // If it wasn't a perfect match, and there were both inserts and removals, we can try allowing the children that\n            // don't match to be \"similar\".\n            if (exactDiffResult.weight.real !== 0 && exactDiffResult.insertCount && exactDiffResult.removeCount) {\n                onlyExact = false;\n                return tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExact);\n            }\n            return null;\n\n        })\n        .then(changesDiffResult => {\n\n            if (changesDiffResult && changesDiffResult.weight.real < bestDiffResult.weight.real) {\n                bestDiffResult = changesDiffResult;\n            }\n            return bestDiffResult;\n        });\n}\n\nfunction tryDiffChildren(actualAdapter, expectedAdapter, actualChildren, expectedChildren, expect, options, onlyExactMatches) {\n\n    let diffWeights = new Weights();\n    const diffResult = [];\n\n    let insertCount = 0;\n    let removeCount = 0;\n    let changeCount = 0;\n    const promises = [];\n\n    return expect.promise((resolve, reject) => {\n        ArrayChangesAsync(actualChildren, expectedChildren,\n            function (a, b, aIndex, bIndex, callback) {\n                diffElementOrWrapper(actualAdapter, expectedAdapter, a, b, expect, options).then(elementDiff => {\n                    return callback(elementDiff.weight.total === WEIGHT_OK);\n                });\n            },\n\n            function (a, b, aIndex, bIndex, callback) {\n\n                if (onlyExactMatches) {\n                    return callback(false);\n                }\n                var aIsNativeType = isNativeType(a);\n                var bIsNativeType = isNativeType(b);\n\n                // If they're native types, assume they're similar\n                if (aIsNativeType && bIsNativeType) {\n                    return callback(true);\n                }\n\n                // If one is an element, then don't count them as \"similar\"\n                if (aIsNativeType !== bIsNativeType) {\n                    return callback(false);\n                }\n\n                // Here we could diff and get a weight, but the weight as to what is similar is dependant on\n                // what the other \"similar\" elements got, so we'll just take a simplistic view -\n                // elements with the same name are similar, otherwise they're not\n                return callback(actualAdapter.getName(a) === expectedAdapter.getName(b));\n            }, function (changes) {\n\n                changes.forEach(diffItem => {\n\n                    let itemResult;\n\n                    switch(diffItem.type) {\n                        case 'insert':\n                            insertCount++;\n                            itemResult = convertToDiff(expectedAdapter, diffItem.value);\n                            if (options.diffMissingChildren) {\n                                diffWeights.add(options.weights.CHILD_MISSING);\n                                itemResult.diff = {\n                                    type: 'missing'\n                                };\n                                diffResult.push(itemResult);\n                            }\n                            break;\n\n                        case 'remove':\n                            removeCount++;\n                            itemResult = convertToDiff(actualAdapter, diffItem.value);\n\n                            if (options.diffExtraChildren) {\n                                itemResult.diff = {\n                                    type: 'extra'\n                                };\n                                diffWeights.addReal(options.weights.CHILD_INSERTED);\n                            }\n                            diffWeights.addTotal(options.weights.CHILD_INSERTED);\n                            diffResult.push(itemResult);\n                            break;\n\n                        case 'similar':\n                            changeCount++;\n                        // fallthrough\n                        // (equal needs to be diffed, because it may contain wrappers, hence we need to work that out.. again)\n                        // It would be good to cache that, from the diff above.\n\n                        case 'equal': //eslint-disable-line no-fallthrough\n                        default:\n                            const index = diffResult.length;\n\n                            diffResult.push({}); // Push a placeholder, we'll replace when the promise resolves\n                            const promise = diffElementOrWrapper(actualAdapter, expectedAdapter, diffItem.value, diffItem.expected, expect, options)\n                                .then(result => {\n                                    diffResult[index] = result.diff;\n                                    diffWeights.addWeight(result.weight);\n                                });\n                            promises.push(promise);\n\n                            break;\n                    }\n\n                });\n\n                if (promises.length) {\n                    return expect.promise.all(promises).then(() => {\n                        resolve();\n                    });\n                }\n                return resolve();\n            });\n\n    }).then(() => {\n\n        if (actualChildren.length === 0 && expectedChildren.length !== 0 && options.diffMissingChildren) {\n            diffWeights.add(options.weights.ALL_CHILDREN_MISSING);\n        }\n\n        return {\n            weight: diffWeights,\n            diff: diffResult,\n            insertCount,\n            removeCount,\n            changeCount\n        };\n    });\n}\n\nexport default {\n    DefaultWeights,\n    diffElements\n};\n"]}