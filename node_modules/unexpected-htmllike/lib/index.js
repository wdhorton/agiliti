'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _isNativeType = require('./isNativeType');

var _isNativeType2 = _interopRequireDefault(_isNativeType);

var _diff = require('./diff');

var _diff2 = _interopRequireDefault(_diff);

var _painter = require('./painter');

var _painter2 = _interopRequireDefault(_painter);

var _contains = require('./contains');

var _contains2 = _interopRequireDefault(_contains);

var _convertToDiff = require('./convertToDiff');

var _convertToDiff2 = _interopRequireDefault(_convertToDiff);

function inspect(adapter, value, depth, output, externalInspector) {

    var diffDescription = (0, _convertToDiff2['default'])(adapter, value);
    (0, _painter2['default'])(output, diffDescription, externalInspector, null /* no diff function required */);
    return output;
}

function getDiff(actualAdapter) {

    return function (expectedAdapter, actual, expected, output, expect, options) {

        return _diff2['default'].diffElements(actualAdapter, expectedAdapter, actual, expected, expect, options).then(function (diffResult) {

            var pen = output.clone();
            (0, _painter2['default'])(pen, diffResult.diff, expect.inspect.bind(expect), expect.diff.bind(expect));

            return {
                output: pen,
                diff: diffResult.diff,
                weight: diffResult.weight
            };
        });
    };
}

function getContains(actualAdapter) {

    return function (expectedAdapter, actual, expected, output, expect, options) {

        return (0, _contains2['default'])(actualAdapter, expectedAdapter, actual, expected, expect, options).then(function (result) {

            if (result.bestMatch) {
                var pen = output.clone();
                (0, _painter2['default'])(pen, result.bestMatch.diff, expect.inspect.bind(expect), expect.diff.bind(expect));
                result.bestMatch.output = pen;
            }
            return result;
        });
    };
}

function HtmlLikeUnexpected(adapter) {

    return {
        inspect: inspect.bind(null, adapter),
        diff: getDiff(adapter),
        contains: getContains(adapter)
    };
}

HtmlLikeUnexpected.DefaultWeights = _diff2['default'].DefaultWeights;

exports['default'] = HtmlLikeUnexpected;
module.exports = exports['default'];
//# sourceMappingURL=index.js.map