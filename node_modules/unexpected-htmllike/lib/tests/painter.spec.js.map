{"version":3,"sources":["../../src/tests/painter.spec.js"],"names":[],"mappings":"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","file":"painter.spec.js","sourcesContent":["\nimport Unexpected from 'unexpected';\nimport MagicPenPrism from 'magicpen-prism';\n\nimport Painter from '../painter';\n\nconst expect = Unexpected\n    .clone()\n    .use(MagicPenPrism);\n\nexpect.output.preferredWidth = 80;\n\nfunction duplicate(object, count) {\n    const result = [];\n    for(let i = count - 1; i >= 0; --i) {\n        result.push(object);\n    }\n    return result;\n}\n\nexpect.addAssertion('<object> to output <string>', function (expect, subject, result) {\n\n    const pen = expect.output.clone();\n    Painter(pen, subject, expect.inspect.bind(expect), expect.diff.bind(expect));\n    expect(pen.toString(), 'to equal', result);\n});\n\ndescribe('Painter', () => {\n\n    let pen;\n\n    beforeEach(() => {\n        pen = expect.output.clone();\n    });\n\n    it('outputs a single empty element', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div'\n        }, expect.inspect);\n\n        expect(pen.toString(), 'to equal',\n        '<div />');\n    });\n\n    it('outputs a single empty element with string attributes', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', value: 'abc' },\n                { name: 'className', value: 'foo' }\n            ]\n        }, expect.inspect);\n\n        expect(pen.toString(), 'to equal',\n            '<div id=\"abc\" className=\"foo\" />');\n    });\n\n    it('outputs a single empty element with object attributes', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', value: 'abc' },\n                { name: 'style', value: { width: 100, height: 200 } }\n            ]\n        }, expect.inspect);\n\n        expect(pen.toString(), 'to equal',\n            '<div id=\"abc\" style={{ width: 100, height: 200 }} />');\n    });\n\n    it('outputs many attributes over separate lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', value: 'abc' },\n                { name: 'className', value: 'foo bah gah blah cheese' },\n                { name: 'another', value: 'big long attribute value' },\n                { name: 'style', value: { width: 100, height: 200 } },\n                { name: 'role', value: 'button-with-a-long-name' }\n            ]\n        }, expect.inspect);\n\n        expect(pen.toString(), 'to equal',\n            '<div id=\"abc\" className=\"foo bah gah blah cheese\" another=\"big long attribute value\"\\n' +\n            '   style={{ width: 100, height: 200 }} role=\"button-with-a-long-name\"\\n' +\n            '/>');\n    });\n\n    it('outputs a changed attribute', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', value: 'abc', diff: { type: 'changed', expectedValue: '123' } }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div id=\"abc\" // should be id=\"123\"\\n' +\n            '              // -abc\\n' +\n            '              // +123\\n' +\n            '/>');\n    });\n\n    it('outputs a different attribute type', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', value: '123', diff: { type: 'changed', expectedValue: 123 } }\n            ]\n        }, expect.inspect);\n\n        expect(pen.toString(), 'to equal',\n            '<div id=\"123\" // should be id={123}\\n' +\n            '/>');\n    });\n\n    it('outputs a different attribute type and value', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', value: '123', diff: { type: 'changed', expectedValue: 1234 } }\n            ]\n        }, expect.inspect);\n\n        expect(pen.toString(), 'to equal',\n            '<div id=\"123\" // should be id={1234}\\n' +\n            '/>');\n    });\n\n\n    it('outputs a different boolean attribute', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'disabled', value: true, diff: { type: 'changed', expectedValue: false } }\n            ]\n        }, expect.inspect);\n\n        expect(pen.toString(), 'to equal',\n            '<div disabled={true} // should be disabled={false}\\n' +\n            '/>');\n    });\n\n\n    it('outputs a changed attribute with an object diff', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', value: { abc: 123, def: 'ghi' }, diff: { type: 'changed', expectedValue: { abc: 123, def: 'ghij' } } }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            \"<div id={{ abc: 123, def: 'ghi' }} // should be id={{ abc: 123, def: 'ghij' }}\\n\" +\n            '                                   // {\\n' +\n            '                                   //   abc: 123,\\n' +\n            \"                                   //   def: 'ghi' // should equal 'ghij'\\n\" +\n            '                                   //              // -ghi\\n' +\n            '                                   //              // +ghij\\n' +\n            '                                   // }\\n' +\n            '/>');\n    });\n\n    it('outputs a missing attribute', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', diff: { type: 'missing', expectedValue: '123' } }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div // missing id=\"123\"\\n' +\n            '/>');\n\n    });\n\n    it('outputs an extra attribte', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', value:'abc', diff: { type: 'extra' } }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div id=\"abc\" // id should be removed\\n' +\n            '/>');\n    });\n\n    it('outputs an inspected object attribute over multiple lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                {\n                    name: 'id',\n                    diff: {\n                        type: 'missing',\n                        expectedValue: {\n                            test: 'one two three four five',\n                            foo: 'bar lah cheese',\n                            testing: 'is fun with long text',\n                            id: 42\n                        }\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div // missing id={{\\n' +\n            \"     //   test: 'one two three four five',\\n\" +\n            \"     //   foo: 'bar lah cheese',\\n\" +\n            \"     //   testing: 'is fun with long text',\\n\" +\n            '     //   id: 42\\n' +\n            '     // }}\\n' +\n            '/>');\n    });\n\n    it('outputs many attributes over multiple lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'id', value: 'very-long-attribute-value' },\n                { name: 'data-value1', value: 'very-long-attribute-value' },\n                { name: 'data-value2', value: 'very-long-attribute-value' }\n            ],\n            children: [ {\n                type: 'CONTENT',\n                value: 'one'\n            }]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div id=\"very-long-attribute-value\" data-value1=\"very-long-attribute-value\"\\n' +\n                '   data-value2=\"very-long-attribute-value\">\\n' +\n            '  one\\n' +\n            '</div>');\n    });\n\n    it('forces the children onto multiple lines when attributes are on multiple lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                {\n                    name: 'id',\n                    diff: {\n                        type: 'missing',\n                        expectedValue: {\n                            test: 'one two three four five',\n                            foo: 'bar lah cheese',\n                            testing: 'is fun with long text',\n                            id: 42\n                        }\n                    }\n                }\n            ],\n            children: [ { type: 'CONTENT', value: 'some text' }]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div // missing id={{\\n' +\n            \"     //   test: 'one two three four five',\\n\" +\n            \"     //   foo: 'bar lah cheese',\\n\" +\n            \"     //   testing: 'is fun with long text',\\n\" +\n            '     //   id: 42\\n' +\n            '     // }}\\n' +\n            '>\\n' +\n            '  some text\\n' +\n            '</div>');\n    });\n\n    it('outputs a single child element', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                { type: 'ELEMENT',\n                  name: 'span'\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div><span /></div>');\n\n    });\n\n\n    it('outputs many children split onto separate lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: duplicate(\n                { type: 'ELEMENT',\n                    name: 'span'\n                }, 12)\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '  <span />\\n' +\n            '</div>');\n    });\n\n    it('outputs children with changes on separate lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [\n                        { name: 'id', value: 'abc', diff: { type: 'changed', expectedValue: 'abcd' } }\n                    ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n        '<div>\\n' +\n        '  <span id=\"abc\" // should be id=\"abcd\"\\n' +\n        '                 // -abc\\n' +\n        '                 // +abcd\\n' +\n        '  />\\n' +\n        '</div>');\n    });\n\n    it('outputs children with single line changes on separate lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [\n                        { name: 'id', diff: { type: 'missing', expectedValue: 'abcd' } }\n                    ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  <span // missing id=\"abcd\"\\n' +\n            '  />\\n' +\n            '</div>');\n    });\n\n    it('outputs text content', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'CONTENT',\n                    value: 'abc'\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>abc</div>');\n\n    });\n\n    it('outputs numeric content', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'CONTENT',\n                    value: 42\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>42</div>');\n\n    });\n\n    it('outputs children with text content on separate lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: duplicate({\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [{ type: 'CONTENT', value: 'text content' }]\n            }, 3)\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  <span className=\"foo\">text content</span>\\n' +\n            '  <span className=\"foo\">text content</span>\\n' +\n            '  <span className=\"foo\">text content</span>\\n' +\n            '</div>');\n\n    });\n\n    it('outputs deep nested children', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: duplicate({\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [\n                    { type: 'ELEMENT', name: 'strong', children: [ { type: 'CONTENT', value: 'text content' }] }\n                ]\n            }, 3)\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  <span className=\"foo\"><strong>text content</strong></span>\\n' +\n            '  <span className=\"foo\"><strong>text content</strong></span>\\n' +\n            '  <span className=\"foo\"><strong>text content</strong></span>\\n' +\n            '</div>');\n    });\n\n    it('outputs a changed text content', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'CONTENT',\n                    value: 'abc',\n                    diff: {\n                        type: 'changed',\n                        expectedValue: 'abcd'\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  -abc\\n' +\n            '  +abcd\\n' +\n            '</div>');\n\n    });\n\n    it('outputs a changed type content', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'CONTENT',\n                    value: '123',\n                    diff: {\n                        type: 'changed',\n                        expectedValue: 123\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  123 // mismatched type -string\\n' +\n            '      //                 +number\\n' +\n            '</div>');\n\n    });\n\n    it('outputs a changed type and value content', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'CONTENT',\n                    value: '1234',\n                    diff: {\n                        type: 'changed',\n                        expectedValue: 123\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  -1234 // and mismatched type -string\\n' +\n            '  +123  //                     +number\\n' +\n            '</div>');\n\n    });\n\n    it('outputs a missing child', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [ { name: 'className', value: 'foo' } ],\n                    diff: {\n                        type: 'missing'\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n        '<div>\\n' +\n        '  // missing <span className=\"foo\" />\\n' +\n        '</div>');\n    });\n\n    it('outputs a missing child in the middle of list of children', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [ { name: 'className', value: 'foo' } ]\n                },\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [ { name: 'className', value: 'foo' } ],\n                    diff: {\n                        type: 'missing'\n                    }\n                },\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [ { name: 'className', value: 'foo' } ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  <span className=\"foo\" />\\n' +\n            '  // missing <span className=\"foo\" />\\n' +\n            '  <span className=\"foo\" />\\n' +\n            '</div>');\n    });\n\n    it('outputs an extra element', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [ { name: 'className', value: 'foo' } ],\n                    diff: {\n                        type: 'extra'\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  <span className=\"foo\" /> // should be removed\\n' +\n            '</div>');\n    });\n\n    it('outputs an extra element over multiple lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [\n                        { name: 'className', value: 'foo' },\n                        { name: 'data-className1', value: 'foo' },\n                        { name: 'data-className2', value: 'foo' },\n                        { name: 'data-className3', value: 'foo' },\n                        { name: 'data-className4', value: 'foo' }\n                    ],\n                    diff: {\n                        type: 'extra'\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  <span className=\"foo\" data-className1=\"foo\" data-className2=\"foo\" // should be removed\\n' +\n            '     data-className3=\"foo\" data-className4=\"foo\"                    //\\n' +\n            '  />                                                                //\\n' +\n            '</div>');\n    });\n\n    it('outputs an extra element in the middle of the children', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [ { name: 'className', value: 'foo' } ]\n                },\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [ { name: 'className', value: 'foo' } ],\n                    diff: {\n                        type: 'extra'\n                    }\n                },\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [ { name: 'className', value: 'foo' } ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  <span className=\"foo\" />\\n' +\n            '  <span className=\"foo\" /> // should be removed\\n' +\n            '  <span className=\"foo\" />\\n' +\n            '</div>');\n    });\n\n    it('outputs a removed text element', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'CONTENT',\n                    value: 'some text',\n                    diff: {\n                        type: 'extra'\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  some text // should be removed\\n' +\n            '</div>');\n    });\n\n    it('outputs a removed text element over multiple lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'CONTENT',\n                    value: 'some text\\nsome more text',\n                    diff: {\n                        type: 'extra'\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  some text      // should be removed\\n' +\n            '  some more text //\\n' +\n            '</div>');\n    });\n\n    it('outputs a missing text element', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'CONTENT',\n                    value: 'some text',\n                    diff: {\n                        type: 'missing'\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  // missing some text\\n' +\n            '</div>');\n    });\n\n    it('outputs a missing text element over multiple lines', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            children: [\n                {\n                    type: 'CONTENT',\n                    value: 'some text\\nsome more text',\n                    diff: {\n                        type: 'missing'\n                    }\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div>\\n' +\n            '  // missing some text\\n' +\n            '  //         some more text\\n' +\n            '</div>');\n    });\n\n\n    it('outputs an extra wrapper', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            diff: {\n                type: 'wrapper'\n            },\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    children: [ { type: 'CONTENT', value: 'some text' } ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div> // wrapper should be removed\\n' +\n            '  <span>some text</span>\\n' +\n            '</div> // wrapper should be removed');\n    });\n\n    it('outputs two levels of extra wrappers', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            diff: {\n                type: 'wrapper'\n            },\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    diff: {\n                        type: 'wrapper'\n                    },\n                    children: [{\n                        type: 'ELEMENT', name: 'span', children: [{ type: 'CONTENT', value: 'some text' }]\n                    } ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div> // wrapper should be removed\\n' +\n            '  <span> // wrapper should be removed\\n' +\n            '    <span>some text</span>\\n' +\n            '  </span> // wrapper should be removed\\n' +\n            '</div> // wrapper should be removed');\n    });\n\n    it('outputs a wrapper on separate line when the wrapper is not a diff', () => {\n\n        Painter(pen, {\n            type: 'WRAPPERELEMENT',\n            name: 'div',\n            attributes: [{ name: 'className', value: 'foo' }],\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    children: [ { type: 'CONTENT', value: 'some text' } ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div className=\"foo\">\\n' +\n            '  <span>some text</span>\\n' +\n            '</div>');\n    });\n\n    it('outputs a wrapper greyed out when the wrapper is not a diff', () => {\n\n        Painter(pen, {\n            type: 'WRAPPERELEMENT',\n            name: 'div',\n            attributes: [{ name: 'className', value: 'foo' }],\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    children: [ { type: 'CONTENT', value: 'some text' } ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen, 'to equal',\n            expect.output.clone().gray('<div className=\"foo\">')\n                    .nl().indentLines().i()\n                    .block(function () {\n                        this.prismPunctuation('<')\n                            .prismTag('span')\n                            .prismPunctuation('>')\n                            .block('some text')\n                            .prismPunctuation('</')\n                            .prismTag('span')\n                            .prismPunctuation('>');\n                    })\n            .nl().gray('</div>')\n        );\n    });\n\n    it('outputs a different named element without attributes or children', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            diff: {\n                type: 'differentElement',\n                expectedName: 'span'\n            }\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div // should be <span\\n' +\n            '/>');\n    });\n\n    it('outputs a different named element without attributes', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            diff: {\n                type: 'differentElement',\n                expectedName: 'span'\n            },\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    children: [{\n                        type: 'CONTENT', value: 'some text'\n                    } ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div // should be <span\\n' +\n            '>\\n' +\n            '  <span>some text</span>\\n' +\n            '</div>');\n\n    });\n\n    it('outputs a different named element with attributes', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'className', value: 'foo' },\n                { name: 'id', value: 'abc123' }\n            ],\n            diff: {\n                type: 'differentElement',\n                expectedName: 'span'\n            },\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    children: [{\n                        type: 'CONTENT', value: 'some text'\n                    } ]\n                }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div // should be <span\\n' +\n            '   className=\"foo\" id=\"abc123\">\\n' +\n            '  <span>some text</span>\\n' +\n            '</div>');\n    });\n\n    it('outputs a different named element with children but without attributes', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [],\n            diff: {\n                type: 'differentElement',\n                expectedName: 'span'\n            },\n            children: [\n                { type: 'CONTENT', value: 'some text' }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div // should be <span\\n' +\n            '>\\n' +\n            '  some text\\n' +\n            '</div>');\n    });\n\n    it('outputs a different named element with attributes in the middle of children', () => {\n\n        Painter(pen, {\n        type: 'ELEMENT',\n        name: 'body',\n            children: [\n                { type: 'ELEMENT', name: 'span', children: [ { type: 'CONTENT', value: 'some text' } ] },\n                {\n                    type: 'ELEMENT',\n                    name: 'div',\n                    attributes: [\n                        { name: 'className', value: 'foo' },\n                        { name: 'id', value: 'abc123' }\n                    ],\n                    diff: {\n                        type: 'differentElement',\n                        expectedName: 'span'\n                    },\n                    children: [\n                        {\n                            type: 'ELEMENT',\n                            name: 'span',\n                            children: [{\n                                type: 'CONTENT', value: 'some text'\n                            } ]\n                        }\n                    ]\n                },\n                { type: 'ELEMENT', name: 'span', children: [ { type: 'CONTENT', value: 'some text' } ] }\n            ]\n    }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<body>\\n' +\n            '  <span>some text</span>\\n' +\n            '  <div // should be <span\\n' +\n            '     className=\"foo\" id=\"abc123\">\\n' +\n            '    <span>some text</span>\\n' +\n            '  </div>\\n' +\n            '  <span>some text</span>\\n' +\n            '</body>');\n    });\n\n    it('outputs a single line contentElementMismatch diff', () => {\n        Painter(pen, {\n            type: 'CONTENT',\n            value: 'some content',\n            diff: {\n                type: 'contentElementMismatch',\n                expected: {\n                    type: 'ELEMENT',\n                    name: 'div',\n                    attributes: [{ name: 'className', value: 'foo' }],\n                    children: [\n                        { type: 'CONTENT', value: 'some text' }\n                    ]\n                }\n            }\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n        'some content // should be <div className=\"foo\">some text</div>');\n\n    });\n\n    it('outputs a multi-line contentElementMismatch diff', () => {\n        Painter(pen, {\n            type: 'CONTENT',\n            value: 'some content',\n            diff: {\n                type: 'contentElementMismatch',\n                expected: {\n                    type: 'ELEMENT',\n                    name: 'div',\n                    attributes: [{ name: 'className', value: 'foo' }],\n                    children: [\n                        { type: 'ELEMENT', name: 'some-long-element-name', children: [\n                            { type: 'ELEMENT', name: 'child-element', children: [\n                                { type: 'CONTENT', value: 'some text' }\n                            ] }\n                        ] }\n                    ]\n                }\n            }\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            'some content // should be <div className=\"foo\">\\n' +\n            '             //             <some-long-element-name><child-element>some text</child-element></some-long-element-name>\\n' +\n            '             //           </div>');\n\n    });\n\n    it('forces a linebreak before a contentElementMismatch', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n                name: 'div',\n            attributes: [],\n            children: [\n            {\n                type: 'CONTENT',\n                value: 'two',\n                diff: {\n                    type: 'contentElementMismatch',\n                    expected: {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        attributes: [],\n                        children: [\n                            {\n                                type: 'CONTENT',\n                                value: 'aa'\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n        '<div>\\n' +\n        '  two // should be <child>aa</child>\\n' +\n        '</div>');\n    });\n\n    it('outputs a single line elementContentMismatch diff', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'className', value: 'foo' }\n            ],\n            diff: {\n                type: 'elementContentMismatch',\n                expected: {\n                    type: 'CONTENT',\n                    value: 'some content'\n                }\n            },\n            children: [\n                { type: 'CONTENT', value: 'some text' }\n            ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div className=\"foo\">some text</div> // should be \\'some content\\'');\n    });\n\n    it('outputs a multi-line elementContentMismatch diff', () => {\n\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [\n                { name: 'className', value: 'foo' }\n            ],\n            children: [\n                {\n                    type: 'ELEMENT',\n                    name: 'some-long-element-name',\n                    attributes: [{ name: 'className', value: 'very long list of classes' }],\n                    children: [\n                        { type: 'ELEMENT', name: 'child-element', children: [{ type: 'CONTENT', value: 'some content' }] }\n                    ]\n                }\n            ],\n            diff: {\n                type: 'elementContentMismatch',\n                expected: {\n                    type: 'CONTENT',\n                    value: 'some content'\n                }\n            }\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n            '<div className=\"foo\">                                            // should be \\'some content\\'\\n' +\n            '  <some-long-element-name className=\"very long list of classes\"> //\\n' +\n            '    <child-element>some content</child-element>                  //\\n' +\n            '  </some-long-element-name>                                      //\\n' +\n            '</div>                                                           //');\n    });\n\n    it('outputs an element/content mismatch diff, and forces a line break before', () => {\n        Painter(pen, {\n            type: 'ELEMENT',\n            name: 'div',\n            attributes: [ { name: 'id', value: 'foo' } ],\n            children: [\n            {\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [ { name: 'id', value: 'childfoo' }\n                ],\n                children: [ { type: 'CONTENT', value: 'one' }\n                ]\n            },\n            {\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [],\n                children: [ { type: 'CONTENT', value: 'two' }\n                ],\n                diff: {\n                    type: 'elementContentMismatch',\n                    expected: { type: 'CONTENT', value: 'some text' }\n                }\n            }\n        ]\n        }, expect.inspect, expect.diff);\n\n        expect(pen.toString(), 'to equal',\n        '<div id=\"foo\">\\n' +\n        '  <span id=\"childfoo\">one</span>\\n' +\n        '  <span>two</span> // should be \\'some text\\'\\n' +\n        '</div>');\n\n    });\n\n    describe('expect.it', () => {\n\n        it('should diff an expect.it assertion attribute', () => {\n\n            // Generate an UnexpectedError\n            let error;\n            try {\n                expect('abcde', 'to match', /[a-d]+$/);\n            } catch (e) {\n                error = e;\n            }\n\n            expect({\n                type: 'ELEMENT',\n                name: 'div',\n                attributes: [{\n                    name: 'className',\n                    value: 'abcde',\n                    diff: {\n                        type: 'custom',\n                        assertion: expect.it('to match', /[a-d]+$/),\n                        error: error\n                    }\n                }],\n                children: []\n            }, 'to output',\n                '<div className=\"abcde\" // expected \\'abcde\\' to match /[a-d]+$/\\n' +\n                '/>');\n\n        });\n\n        it('should diff an expect.it assert content', () => {\n\n            // Generate an UnexpectedError\n            let error;\n            try {\n                expect('abcde', 'to match', /[a-d]+$/);\n            } catch (e) {\n                error = e;\n            }\n\n            expect({\n                    type: 'ELEMENT',\n                    name: 'div',\n                    children: [{\n                        type: 'CONTENT',\n                        value: 'abcde',\n                        diff: {\n                            type: 'custom',\n                            assertion: expect.it('to match', /[a-d]+$/),\n                            error: error\n                        }\n                    }]\n                }, 'to output',\n                '<div>\\n' +\n                '  abcde // expected \\'abcde\\' to match /[a-d]+$/\\n' +\n                '</div>');\n        });\n\n        it('should diff an expect.it assert content on numbers', () => {\n\n            // Generate an UnexpectedError\n            let error;\n            try {\n                expect(17, 'to be a string');\n            } catch (e) {\n                error = e;\n            }\n\n            expect({\n                    type: 'ELEMENT',\n                    name: 'div',\n                    children: [{\n                        type: 'CONTENT',\n                        value: 17,\n                        diff: {\n                            type: 'custom',\n                            assertion: expect.it('to match', /[a-d]+$/),\n                            error: error\n                        }\n                    }]\n                }, 'to output',\n                '<div>\\n' +\n                '  17 // expected 17 to be a string\\n' +\n                '</div>');\n        });\n\n        it('should diff an expect.it assert content over multiple lines', () => {\n\n            // Generate an UnexpectedError\n            let error;\n            try {\n                expect('abcde', 'to be a string').and('to have length', 4);\n            } catch (e) {\n                error = e;\n            }\n\n            expect({\n                    type: 'ELEMENT',\n                    name: 'div',\n                    children: [{\n                        type: 'CONTENT',\n                        value: 'abcde',\n                        diff: {\n                            type: 'custom',\n                            assertion: expect.it('to be a string').and('to have length', 4),\n                            error: error\n                        }\n                    }]\n                }, 'to output',\n                '<div>\\n' +\n                '  abcde // expected \\'abcde\\' to have length 4\\n' +\n                '        //   expected 5 to be 4\\n' +\n                '</div>');\n        });\n\n        it('should show an expect.it assertion when the value is an assertion', () => {\n\n            expect({\n                    type: 'ELEMENT',\n                    name: 'div',\n                    children: [{\n                        type: 'CONTENT',\n                        value: expect.it('to be a', 'string').and('to have length', 4)\n                    }]\n                }, 'to output',\n                '<div>\\n' +\n                \"  {expect.it('to be a', 'string')\\n\" +\n                \"          .and('to have length', 4)}\\n\" +   // TODO: I don't understand why this is indented wrong\n                '</div>');\n        });\n    });\n});\n"]}