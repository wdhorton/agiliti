{"version":3,"sources":["../../src/tests/contains.spec.js"],"names":[],"mappings":"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","file":"contains.spec.js","sourcesContent":["import Unexpected from 'unexpected';\n\nimport Contains from '../contains';\nimport Diff from '../diff';\n\nconst expect = Unexpected.clone();\n\nconst TestAdapter = {\n    getName(comp) { return comp.name; },\n\n    getAttributes(comp) { return comp.attribs; },\n\n    getChildren(comp) {\n        return (comp.children && [].concat([], comp.children)) || [];\n    }\n};\n\nfunction getContains(actual, expected, options) {\n    return Contains(TestAdapter, TestAdapter, actual, expected, expect, options);\n}\n\nexpect.addType({\n\n    name: 'TestHtmlElement',\n    base: 'object',\n    identify: function (value) {\n        return value &&\n            typeof value === 'object' &&\n            typeof value.name === 'string' &&\n            typeof value.attribs === 'object';\n    }\n});\n\nexpect.addAssertion('<TestHtmlElement> when checked to contain <TestHtmlElement> <assertion>', function (expect, subject, value) {\n\n    return Contains(TestAdapter, TestAdapter, subject, value, expect, {}).then(result => {\n        expect.shift(result);\n    });\n});\n\n\nexpect.addAssertion('<TestHtmlElement> when checked with options to contain <object> <TestHtmlElement> <assertion>', function (expect, subject, options, value) {\n\n    return Contains(TestAdapter, TestAdapter, subject, value, expect, options).then(result => {\n        expect.shift(result);\n    });\n});\n\ndescribe('contains', () => {\n\n    it('finds an exact match', () => {\n        return expect(\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] },\n            'when checked to contain',\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] },\n            'to satisfy',\n            { found: true }\n        );\n\n    });\n\n    it('reports the inspection of the found item', () => {\n        return expect(\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] },\n            'when checked to contain',\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] },\n            'to satisfy',\n            {\n                found: true,\n                bestMatch: {\n                    diff: {\n                        type: 'ELEMENT',\n                        name: 'span',\n                        attributes: [ { name: 'className', value: 'foo' } ]\n                    }\n                }\n            }\n        );\n    });\n\n    it('reports not found when no exact match exists', () => {\n        return expect(\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] },\n            'when checked to contain',\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some other content'] },\n            'to satisfy',\n            { found: false }\n        );\n    });\n\n    it('finds an element nested one deep', () => {\n        return expect({ name: 'div', attribs: {}, children: [\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }\n        ]\n        }, 'when checked to contain', { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }, 'to satisfy', { found: true });\n    });\n\n    it('finds a deep nested element', () => {\n        return expect({ name: 'div', attribs: {}, children: [\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'blah'] },\n            { name: 'span', attribs: { className: 'foo' }, children: [\n                { name: 'span', attribs: { className: 'foo' }, children: [ 'some content' ] }\n            ] },\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'blubs'] }\n        ]\n        }, 'when checked to contain', { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }, 'to satisfy', { found: true, bestMatch: {\n            diff: {\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [ { name: 'className', value: 'foo' } ]\n            }\n        } });\n    });\n\n    it('finds a best match when the content is different', () => {\n        return expect({ name: 'div', attribs: {}, children: [\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some different content' ] }\n        ]\n        }, 'when checked to contain', { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }, 'to satisfy', { found: false, bestMatchItem: {\n            name: 'span', attribs: { className: 'foo' }, children: [ 'some different content' ]\n        } });\n    });\n\n    it('finds a best match in an array of children with an extra attribute', () => {\n        return expect({ name: 'div', attribs: {}, children: [\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some content' ] },\n            { name: 'span', attribs: { className: 'bar' }, children: [ 'some content' ] },\n            { name: 'span', attribs: { className: 'candidate', id: 'abc' }, children: [ 'some content' ] }\n        ]\n        }, 'when checked to contain', { name: 'span', attribs: { className: 'candidate' }, children: [ 'some content'] }, 'to satisfy', { found: false, bestMatchItem: {\n            name: 'span', attribs: { className: 'candidate', id: 'abc' }, children: [ 'some content' ]\n        } });\n    });\n\n    it('returns a diff when the content is different', () => {\n        return expect({ name: 'div', attribs: {}, children: [\n            { name: 'span', attribs: { className: 'foo' }, children: [ 'some different content' ] }\n        ]\n        }, 'when checked to contain', { name: 'span', attribs: { className: 'foo' }, children: [ 'some content'] }, 'to satisfy', {\n            found: false,\n            bestMatch: {\n                diff: {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    attributes: [{ name: 'className', value: 'foo' }],\n                    children: [ {\n                        type: 'CONTENT',\n                        value: 'some different content',\n                        diff: {\n                            type: 'changed',\n                            expectedValue: 'some content'\n                        }\n                    } ]\n                },\n                weight: Diff.DefaultWeights.STRING_CONTENT_MISMATCH\n            }\n        });\n    });\n\n    it('doesn\\'t include wrappers in the bestMatchItem around the item that is found', () => {\n        const searchItem = {\n            name: 'div', attribs: {}, children: [\n                {\n                    name: 'wrapper', attribs: { className: 'the-wrapper' },\n                    children: [\n                        { name: 'span', attribs: { className: 'foo' }, children: ['some different content'] }\n                    ]\n\n                }\n            ]\n        };\n\n        return expect({\n            name: 'body', attribs: {}, children: [ searchItem ]\n        }, 'when checked with options to contain', { diffWrappers: false }, {\n            name: 'div', attribs: {}, children: [\n                { name: 'span', attribs: { className: 'foo' }, children: ['some content'] }\n            ]\n        }, 'to satisfy', {\n            found: false,\n            bestMatchItem: searchItem\n        });\n    });\n\n    it('doesn\\'t include wrappers in the bestMatch around the item that is found', () => {\n        return expect({\n            name: 'body', attribs: {}, children: [ {\n                name: 'div', attribs: {}, children: [\n                    {\n                        name: 'wrapper', attribs: { className: 'the-wrapper' },\n                        children: [\n                            { name: 'span', attribs: { className: 'foo' }, children: ['some different content'] }\n                        ]\n\n                    }\n                ]\n            } ]\n        }, 'when checked with options to contain', { diffWrappers: false }, {\n            name: 'div', attribs: {}, children: [\n                { name: 'span', attribs: { className: 'foo' }, children: ['some content'] }\n            ]\n        }, 'to satisfy', {\n            found: false,\n            bestMatch: {\n                diff: {\n                    type: 'ELEMENT',\n                    name: 'div',      // Top level in the diff is the div, not the body\n                    children: [ {\n                        type: 'WRAPPERELEMENT',\n                        name: 'wrapper'\n                    }]\n                }\n            }\n        });\n    });\n\n    it('doesn\\'t include wrappers in the bestMatch around an item that is found to match', () => {\n        return expect({\n            name: 'body', attribs: {}, children: [{\n                name: 'div', attribs: {}, children: [\n                    {\n                        name: 'wrapper', attribs: { className: 'the-wrapper' },\n                        children: [\n                            { name: 'span', attribs: { className: 'foo' }, children: ['some content'] }\n                        ]\n\n                    }\n                ]\n            }]\n        }, 'when checked with options to contain', { diffWrappers: false }, {\n            name: 'div', attribs: {}, children: [\n                { name: 'span', attribs: { className: 'foo' }, children: ['some content'] }\n            ]\n        }, 'to satisfy', {\n            found: true,\n            bestMatch: {\n                diff: {\n                    type: 'ELEMENT',\n                    name: 'div',      // Top level in the diff is the div, not the body\n                    children: [{\n                        type: 'WRAPPERELEMENT',\n                        name: 'wrapper'\n                    }]\n                }\n            }\n        });\n    });\n});\n"]}