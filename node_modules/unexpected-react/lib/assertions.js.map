{"version":3,"sources":["../src/assertions.js"],"names":[],"mappings":"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","file":"assertions.js","sourcesContent":["import RenderHook from 'react-render-hook';\nimport UnexpectedHtmlLike from 'unexpected-htmllike';\nimport RenderedReactElementAdapter from 'unexpected-htmllike-reactrendered-adapter';\nimport ReactElementAdapter from 'unexpected-htmllike-jsx-adapter';\n\n\nfunction checkAttached(expect) {\n    if (!RenderHook.isAttached) {\n        expect.errorMode = 'bubble';\n        expect.fail(output => {\n            return output.error('The global rendering hook is not attached')\n                .nl().text('This probably means React was required before unexpected-react. Check that unexpected-react is required first')\n        });\n    }\n}\n\nfunction installInto(expect) {\n\n    const renderedReactElementAdapter = new RenderedReactElementAdapter({ convertToString: true });\n    const htmlLikeRenderedReactElement = UnexpectedHtmlLike(renderedReactElementAdapter);\n    const reactElementAdapter = new ReactElementAdapter({ convertToString: true });\n\n\n    expect.addAssertion(['<RenderedReactElement> to have [exactly] rendered <ReactElement>',\n        '<RenderedReactElement> to have rendered [with all children] [with all wrappers] <ReactElement>'], function (expect, subject, element) {\n\n            checkAttached(expect);\n\n            var exactly = this.flags.exactly;\n            var withAllChildren = this.flags['with all children'];\n            var withAllWrappers = this.flags['with all wrappers'];\n\n            var jsxAdapter = new ReactElementAdapter();\n            if (!exactly) {\n                jsxAdapter.setOptions({ concatTextContent: true });\n            }\n\n            var options = {\n                diffWrappers: exactly || withAllWrappers,\n                diffExtraChildren: exactly || withAllChildren,\n                diffExtraAttributes: exactly\n            };\n            const data = RenderHook.findComponent(subject);\n            return htmlLikeRenderedReactElement.diff(jsxAdapter, data, element, expect.output.clone(), expect, options).then(result => {\n\n                return expect.withError(() => expect(result.weight, 'to equal', 0), () => {\n                    expect.fail({\n                        diff: function (output, diff, inspect, equal) {\n                            return {\n                                diff: result.output\n                            };\n                        }\n                    });\n                });\n            });\n\n        });\n\n    expect.addAssertion(['<RenderedReactElement> [not] to contain [exactly] <ReactElement|string>',\n        '<RenderedReactElement> [not] to contain [with all children] [with all wrappers] <ReactElement|string>'], function (expect, subject, element) {\n\n        checkAttached(expect);\n\n        var not = this.flags.not;\n        var exactly = this.flags.exactly;\n        var withAllChildren = this.flags['with all children'];\n        var withAllWrappers = this.flags['with all wrappers'];\n\n        var jsxAdapter = new ReactElementAdapter();\n        if (!exactly) {\n            jsxAdapter.setOptions({ concatTextContent: true });\n        }\n\n        var options = {\n            diffWrappers: exactly || withAllWrappers,\n            diffExtraChildren: exactly || withAllChildren,\n            diffExtraAttributes: exactly\n        };\n\n        const data = RenderHook.findComponent(subject);\n        return htmlLikeRenderedReactElement.contains(jsxAdapter, data, element, expect.output.clone(), expect, options)\n            .then(containsResult => {\n                if (not) {\n                    if (containsResult.found) {\n                        expect.fail({\n                            diff: output => {\n                                return {\n                                    diff: output.error('but found the following match').nl().append(containsResult.bestMatch.output)\n                                };\n                            }\n                        });\n                    }\n                    return;\n                }\n\n                if (!containsResult.found) {\n                    expect.fail({\n                        diff: function (output) {\n                            return {\n                                diff: output.error('the best match was').nl().append(containsResult.bestMatch.output)\n                            };\n                        }\n                    });\n                }\n            });\n\n\n    });\n\n    expect.addAssertion(['<ReactElement> to have [exactly] rendered <ReactElement>',\n        '<ReactElement> to have rendered [with all children] [with all wrappers] <ReactElement>'], function (expect, subject, expected) {\n\n        var exactly = this.flags.exactly;\n        var withAllChildren = this.flags['with all children'];\n        var withAllWrappers = this.flags['with all wrappers'];\n\n        var adapter = new ReactElementAdapter();\n        var jsxHtmlLike = new UnexpectedHtmlLike(adapter);\n        if (!exactly) {\n            adapter.setOptions({ concatTextContent: true });\n        }\n\n        var options = {\n            diffWrappers: exactly || withAllWrappers,\n            diffExtraChildren: exactly || withAllChildren,\n            diffExtraAttributes: exactly\n        };\n\n        return jsxHtmlLike.diff(adapter, subject, expected, expect.output.clone(), expect, options).then(function (diffResult) {\n            if (diffResult.weight !== 0) {\n                return expect.fail({\n                    diff: function () {\n                        return {\n                            diff: diffResult.output\n                        };\n                    }\n                });\n            }\n        });\n\n    });\n\n    expect.addAssertion(['<ReactElement> [not] to contain [exactly] <ReactElement|string>',\n        '<ReactElement> [not] to contain [with all children] [with all wrappers] <ReactElement|string>'], function (expect, subject, expected) {\n\n        var not = this.flags.not;\n        var exactly = this.flags.exactly;\n        var withAllChildren = this.flags['with all children'];\n        var withAllWrappers = this.flags['with all wrappers'];\n\n        var adapter = new ReactElementAdapter();\n        var jsxHtmlLike = new UnexpectedHtmlLike(adapter);\n        if (!exactly) {\n            adapter.setOptions({ concatTextContent: true });\n        }\n\n        var options = {\n            diffWrappers: exactly || withAllWrappers,\n            diffExtraChildren: exactly || withAllChildren,\n            diffExtraAttributes: exactly\n        };\n\n        return jsxHtmlLike.contains(adapter, subject, expected, expect.output, expect, options)\n            .then(function (containsResult) {\n\n                if (not) {\n                    if (containsResult.found) {\n                        expect.fail({\n                            diff: output => {\n                                return {\n                                    diff: output.error('but found the following match').nl().append(containsResult.bestMatch.output)\n                                };\n                            }\n                        });\n                    }\n                    return;\n                }\n\n                if (!containsResult.found) {\n                    expect.fail({\n                        diff: function (output) {\n                            return {\n                                diff: output.error('the best match was').nl().append(containsResult.bestMatch.output)\n                            };\n                        }\n                    });\n                }\n            });\n    });\n\n    expect.addAssertion('<ReactElement> to equal <ReactElement>', function (expect, subject, value) {\n        return expect(subject, 'to have exactly rendered', value);\n    });\n\n    expect.addAssertion('<ReactShallowRenderer> to equal <ReactElement>', function (expect, subject, value) {\n        return expect(subject.getRenderOutput(), 'to have exactly rendered', value);\n    });\n\n    expect.addAssertion('<ReactElement> to satisfy <ReactElement>', function (expect, subject, renderOutput) {\n        return expect(subject, 'to have rendered', renderOutput);\n    });\n\n    expect.addAssertion(['<ReactShallowRenderer> to have [exactly] rendered <ReactElement>',\n        '<ReactShallowRenderer> to have rendered [with all children] [with all wrappers] <ReactElement>'], function (expect, subject, renderOutput) {\n        var actual = subject.getRenderOutput();\n        return expect(actual, 'to have [exactly] rendered [with all children] [with all wrappers]', renderOutput);\n    });\n\n    expect.addAssertion(['<ReactShallowRenderer> [not] to contain [exactly] <ReactElement|string>',\n        '<ReactShallowRenderer> [not] to contain [with all children] [with all wrappers] <ReactElement|string>'], function (expect, subject, renderOutput) {\n        var actual = subject.getRenderOutput();\n        return expect(actual, '[not] to contain [exactly] [with all children] [with all wrappers]', renderOutput);\n    });\n\n    expect.addAssertion('<ReactModule> to have been injected', function (expect, subject) {\n        checkAttached(expect);\n    });\n}\n\nexport default { installInto }"]}