{"version":3,"sources":["../../src/tests/Select.spec.js"],"names":[],"mappings":"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","file":"Select.spec.js","sourcesContent":["/*\n * This is a set of \"normal\" tests for some sample component\n * They are meant to demonstrate the use, but also be a check that everything works\n * in the context of a normal project, how people will/should use it\n *\n * These tests should never break, without breaking other more specific tests somewhere else\n */\n\nconst EmulateDom = require( '../testHelpers/emulateDom');\n\nconst Unexpected = require('unexpected');\nconst UnexpectedReact = require('../unexpected-react');\n\nconst React = require('react/addons');\n\nconst TestUtils = React.addons.TestUtils;\n\nconst Select = require('./components/Select');\nconst SelectOption = require('./components/SelectOption');\n\nconst expect = Unexpected.clone()\n    .use(UnexpectedReact);\n\n\ndescribe('Select', () => {\n\n    let component;\n    beforeEach(() => {\n\n        const options = [\n            { label: 'one', value: 1 },\n            { label: 'two', value: 2 },\n            { label: 'three', value: 3 }\n        ];\n        component = TestUtils.renderIntoDocument(<Select options={options} />)\n    });\n\n    it('should render a div.Select', () => {\n\n        return expect(component, 'to have rendered', <div className=\"Select\"/>);\n    });\n\n    it('should not show any options initially', () => {\n\n        return expect(component, 'not to contain', <SelectOption />);\n    });\n\n    it('should show the menu when clicked', () => {\n\n        TestUtils.Simulate.click(React.findDOMNode(component));\n        return expect(component, 'to have rendered',\n            <div>\n                <SelectOption />\n                <SelectOption />\n                <SelectOption />\n            </div>);\n    });\n\n    it('renders the options', () => {\n\n        TestUtils.Simulate.click(React.findDOMNode(component));\n        return expect(component, 'to have rendered',\n            <div>\n                <li>one</li>\n                <li>two</li>\n                <li>three</li>\n            </div>);\n    });\n\n\n    it('renders a particular option', () => {\n\n        TestUtils.Simulate.click(React.findDOMNode(component));\n\n        return expect(component, 'to contain',\n            <li id={ expect.it('to match', /unique_[0-9]+/) }>two</li>\n        );\n    });\n\n    it('renders a particular option', () => {\n\n        TestUtils.Simulate.click(React.findDOMNode(component));\n\n        return expect(component, 'to contain',\n            <li>{ expect.it('to match', /th/) }</li>\n        );\n    });\n});\n\n"]}