{"version":3,"sources":["../../src/tests/unexpected-react-deep.spec.js"],"names":[],"mappings":"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","file":"unexpected-react-deep.spec.js","sourcesContent":["/*\n * A note about these tests:\n *\n * These tests are specifically only testing that the correct calls are being made\n  * to unexpected-htmllike, and that the output is correctly returned.\n  * They also test the integration with the unexpected-htmllike-rendered-react-adapter\n  * There are many, many more cases for specific diffing cases in the tests for\n  * `unexpected-htmllike`\n */\n\nconst EmulateDom = require( '../testHelpers/emulateDom');\n\nconst Unexpected = require('unexpected');\nconst UnexpectedReact = require('../unexpected-react');\n\nconst React = require('react/addons');\n\nconst TestUtils = React.addons.TestUtils;\n\nconst expect = Unexpected.clone()\n    .use(UnexpectedReact);\n\nexpect.output.preferredWidth = 80;\n\nclass CustomComp extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            clickCount: 0\n        };\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick(event) {\n        event.preventDefault();  // Used to check that we get the event properly\n        this.setState({\n            clickCount: this.state.clickCount + 1\n        });\n    }\n\n    render() {\n        let children = null;\n        if (this.props.childCount) {\n            children = [];\n            for(let i = 1; i <= this.props.childCount; ++i) {\n                children.push(<span key={i} className={'' + i}>{null}{i}</span>);\n            }\n        }\n        // If onClick was passed, add it as a prop, otherwise, leave it undefined\n        const extraProps = {};\n        if (this.props.useEvents) {\n            extraProps.onClick = this.onClick;\n            extraProps['data-click-count'] = this.state.clickCount;\n        }\n\n        return (\n            <div\n                className={this.props.className}\n                {...extraProps}\n            >\n                {children}\n            </div>\n        );\n    }\n}\n\nclass WrapperComp extends React.Component {\n    render() {\n        return <CustomComp {...this.props} />;\n    }\n}\n\ndescribe('unexpected-react (deep rendering)', () => {\n\n    beforeEach(() => {\n        UnexpectedReact.clearAll();\n    });\n\n    describe('identify', () => {\n\n        it('identifies a rendered component', () => {\n\n            const component = TestUtils.renderIntoDocument(<div className=\"foo\" />);\n            expect(component, 'to be a', 'RenderedReactElement');\n        });\n\n    });\n\n    describe('ReactModule', () => {\n        it('identifies React correctly', () => {\n\n            expect(React, 'to be a', 'ReactModule');\n        });\n\n        it('determines that the global hook has been installed', () => {\n\n            expect(React, 'to have been injected');\n        });\n    });\n\n\n    describe('inspect', () => {\n\n        it('inspects a rendered native element', () => {\n\n            const component = TestUtils.renderIntoDocument(<div className=\"foo\" />);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<div className=\"foo\" />');\n        });\n\n        it('inspects a rendered native element with a string child', () => {\n\n            const component = TestUtils.renderIntoDocument(<div className=\"foo\">content</div>);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<div className=\"foo\">content</div>');\n        });\n\n        it('inspects a rendered native element with a numeric child', () => {\n\n            const component = TestUtils.renderIntoDocument(<div className=\"foo\">{42}</div>);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<div className=\"foo\">42</div>');\n        });\n\n\n\n        it('inspects a rendered native element with children', () => {\n\n            const component = TestUtils.renderIntoDocument(<div className=\"foo\"><span className=\"child1\" /></div>);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<div className=\"foo\"><span className=\"child1\" /></div>');\n        });\n\n        it('inspects a rendered native element with children and content', () => {\n\n            const component = TestUtils.renderIntoDocument(\n                <div className=\"foo\">\n                    <span className=\"child1\">child content 1</span>\n                    <span className=\"child2\">child content 2</span>\n                </div>);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<div className=\"foo\">\\n' +\n                '  <span className=\"child1\">child content 1</span>\\n' +\n                '  <span className=\"child2\">child content 2</span>\\n' +\n                '</div>');\n        });\n\n        it('inspects a rendered custom component', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" />);\n            expect(expect.inspect(component).toString(), 'to equal',\n                '<CustomComp className=\"bar\"><div className=\"bar\" /></CustomComp>');\n        });\n\n        it('inspects a rendered custom component with a child custom component element', () => {\n\n            const component = TestUtils.renderIntoDocument(<WrapperComp className=\"bar\" />);\n            expect(expect.inspect(component).toString(), 'to equal',\n            '<WrapperComp className=\"bar\">\\n' +\n            '  <CustomComp className=\"bar\"><div className=\"bar\" /></CustomComp>\\n' +\n            '</WrapperComp>');\n        });\n\n    });\n\n    describe('to have rendered', () => {\n\n        it('matches a rendered simple component', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" />);\n            return expect(component, 'to have rendered', <CustomComp className=\"bar\"><div className=\"bar\" /></CustomComp>);\n        });\n\n        it('matches a rendered deeper component', () => {\n\n            const component = TestUtils.renderIntoDocument(<WrapperComp className=\"bar\" />);\n            return expect(component, 'to have rendered',\n                <WrapperComp className=\"bar\">\n                    <CustomComp className=\"bar\">\n                        <div className=\"bar\" />\n                    </CustomComp>\n                </WrapperComp>);\n        });\n\n        it('matches an a component with many children', () => {\n\n            const component = TestUtils.renderIntoDocument(<WrapperComp className=\"bar\" childCount={3} />);\n            return expect(component, 'to have rendered',\n                <WrapperComp className=\"bar\" childCount={3}>\n                        <div className=\"bar\">\n                            <span className=\"1\">1</span>\n                            <span className=\"2\">2</span>\n                            <span className=\"3\">3</span>\n                        </div>\n                </WrapperComp>);\n        });\n\n        it('identifies a wrapper', () => {\n            const component = TestUtils.renderIntoDocument(<WrapperComp className=\"bar\" childCount={3} />);\n            return expect(component, 'to have rendered',\n                <WrapperComp className=\"bar\" childCount={3}>\n                        <span className=\"1\">1</span>\n                        <span className=\"2\">2</span>\n                        <span className=\"3\">3</span>\n                </WrapperComp>);\n        });\n\n        it('updates on change', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" useEvents={true} />);\n            TestUtils.Simulate.click(React.findDOMNode(component));\n\n            return expect(component, 'to have rendered',\n                    <div className=\"bar\" data-click-count={1} />\n            );\n        });\n\n        it('matches an expect.it assertion on a prop', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" />);\n\n            return expect(component, 'to have rendered',\n                <div className={ expect.it('to match', /bar/) } />\n            );\n        });\n\n        it('highlights a difference with an expect.it assertion on a prop', () => {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" />);\n\n            return expect(expect(component, 'to have rendered',\n                <div className={ expect.it('to match', /foo/) } />\n            ), 'to be rejected with',\n                'expected <CustomComp className=\"bar\"><div className=\"bar\" /></CustomComp>\\n' +\n                'to have rendered <div className={expect.it(\\'to match\\', /foo/)} />\\n' +\n                '\\n' +\n                '<CustomComp className=\"bar\">\\n' +\n                '  <div className=\"bar\" // expected \\'bar\\' to match /foo/\\n' +\n                '  />\\n' +\n                '</CustomComp>');\n        });\n\n        it('highlights a difference with an expect.it assertion on content', () =>  {\n\n            const component = TestUtils.renderIntoDocument(<CustomComp className=\"bar\" childCount={1} />);\n            return expect(() => expect(component, 'to have rendered',\n                <div>\n                    <span>{ expect.it('to match', /[a-z]/) }</span>\n                </div>\n                ), 'to error',\n                'expected\\n' +\n                '<CustomComp className=\"bar\" childCount={1}>\\n' +\n                '  <div className=\"bar\"><span className=\"1\">1</span></div>\\n' +\n                '</CustomComp>\\n' +\n                'to have rendered <div><span>{expect.it(\\'to match\\', /[a-z]/)}</span></div>\\n' +\n                '\\n' +\n                '<CustomComp className=\"bar\" childCount={1}>\\n' +\n                '  <div className=\"bar\">\\n' +\n                '    <span className=\"1\">\\n' +\n                \"      1 // expected '1' to match /[a-z]/\\n\" +\n                '    </span>\\n' +\n                '  </div>\\n' +\n                '</CustomComp>');\n        });\n    });\n});"]}