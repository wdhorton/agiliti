'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * A note about these tests:
 *
 * These tests are specifically only testing that the correct calls are being made
  * to unexpected-htmllike, and that the output is correctly returned.
  * They also test the integration with the unexpected-htmllike-rendered-react-adapter
  * There are many, many more cases for specific diffing cases in the tests for
  * `unexpected-htmllike`
 */

var EmulateDom = require('../testHelpers/emulateDom');

var Unexpected = require('unexpected');
var UnexpectedReact = require('../unexpected-react');

var React = require('react/addons');

var TestUtils = React.addons.TestUtils;

var expect = Unexpected.clone().use(UnexpectedReact);

expect.output.preferredWidth = 80;

var CustomComp = (function (_React$Component) {
    _inherits(CustomComp, _React$Component);

    function CustomComp() {
        _classCallCheck(this, CustomComp);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CustomComp).call(this));

        _this.state = {
            clickCount: 0
        };
        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }

    _createClass(CustomComp, [{
        key: 'onClick',
        value: function onClick(event) {
            event.preventDefault(); // Used to check that we get the event properly
            this.setState({
                clickCount: this.state.clickCount + 1
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var children = null;
            if (this.props.childCount) {
                children = [];
                for (var i = 1; i <= this.props.childCount; ++i) {
                    children.push(React.createElement(
                        'span',
                        { key: i, className: '' + i },
                        null,
                        i
                    ));
                }
            }
            // If onClick was passed, add it as a prop, otherwise, leave it undefined
            var extraProps = {};
            if (this.props.useEvents) {
                extraProps.onClick = this.onClick;
                extraProps['data-click-count'] = this.state.clickCount;
            }

            return React.createElement(
                'div',
                _extends({
                    className: this.props.className
                }, extraProps),
                children
            );
        }
    }]);

    return CustomComp;
})(React.Component);

var WrapperComp = (function (_React$Component2) {
    _inherits(WrapperComp, _React$Component2);

    function WrapperComp() {
        _classCallCheck(this, WrapperComp);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(WrapperComp).apply(this, arguments));
    }

    _createClass(WrapperComp, [{
        key: 'render',
        value: function render() {
            return React.createElement(CustomComp, this.props);
        }
    }]);

    return WrapperComp;
})(React.Component);

describe('unexpected-react (deep rendering)', function () {

    beforeEach(function () {
        UnexpectedReact.clearAll();
    });

    describe('identify', function () {

        it('identifies a rendered component', function () {

            var component = TestUtils.renderIntoDocument(React.createElement('div', { className: 'foo' }));
            expect(component, 'to be a', 'RenderedReactElement');
        });
    });

    describe('ReactModule', function () {
        it('identifies React correctly', function () {

            expect(React, 'to be a', 'ReactModule');
        });

        it('determines that the global hook has been installed', function () {

            expect(React, 'to have been injected');
        });
    });

    describe('inspect', function () {

        it('inspects a rendered native element', function () {

            var component = TestUtils.renderIntoDocument(React.createElement('div', { className: 'foo' }));
            expect(expect.inspect(component).toString(), 'to equal', '<div className="foo" />');
        });

        it('inspects a rendered native element with a string child', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(
                'div',
                { className: 'foo' },
                'content'
            ));
            expect(expect.inspect(component).toString(), 'to equal', '<div className="foo">content</div>');
        });

        it('inspects a rendered native element with a numeric child', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(
                'div',
                { className: 'foo' },
                42
            ));
            expect(expect.inspect(component).toString(), 'to equal', '<div className="foo">42</div>');
        });

        it('inspects a rendered native element with children', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(
                'div',
                { className: 'foo' },
                React.createElement('span', { className: 'child1' })
            ));
            expect(expect.inspect(component).toString(), 'to equal', '<div className="foo"><span className="child1" /></div>');
        });

        it('inspects a rendered native element with children and content', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(
                'div',
                { className: 'foo' },
                React.createElement(
                    'span',
                    { className: 'child1' },
                    'child content 1'
                ),
                React.createElement(
                    'span',
                    { className: 'child2' },
                    'child content 2'
                )
            ));
            expect(expect.inspect(component).toString(), 'to equal', '<div className="foo">\n' + '  <span className="child1">child content 1</span>\n' + '  <span className="child2">child content 2</span>\n' + '</div>');
        });

        it('inspects a rendered custom component', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(CustomComp, { className: 'bar' }));
            expect(expect.inspect(component).toString(), 'to equal', '<CustomComp className="bar"><div className="bar" /></CustomComp>');
        });

        it('inspects a rendered custom component with a child custom component element', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(WrapperComp, { className: 'bar' }));
            expect(expect.inspect(component).toString(), 'to equal', '<WrapperComp className="bar">\n' + '  <CustomComp className="bar"><div className="bar" /></CustomComp>\n' + '</WrapperComp>');
        });
    });

    describe('to have rendered', function () {

        it('matches a rendered simple component', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(CustomComp, { className: 'bar' }));
            return expect(component, 'to have rendered', React.createElement(
                CustomComp,
                { className: 'bar' },
                React.createElement('div', { className: 'bar' })
            ));
        });

        it('matches a rendered deeper component', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(WrapperComp, { className: 'bar' }));
            return expect(component, 'to have rendered', React.createElement(
                WrapperComp,
                { className: 'bar' },
                React.createElement(
                    CustomComp,
                    { className: 'bar' },
                    React.createElement('div', { className: 'bar' })
                )
            ));
        });

        it('matches an a component with many children', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(WrapperComp, { className: 'bar', childCount: 3 }));
            return expect(component, 'to have rendered', React.createElement(
                WrapperComp,
                { className: 'bar', childCount: 3 },
                React.createElement(
                    'div',
                    { className: 'bar' },
                    React.createElement(
                        'span',
                        { className: '1' },
                        '1'
                    ),
                    React.createElement(
                        'span',
                        { className: '2' },
                        '2'
                    ),
                    React.createElement(
                        'span',
                        { className: '3' },
                        '3'
                    )
                )
            ));
        });

        it('identifies a wrapper', function () {
            var component = TestUtils.renderIntoDocument(React.createElement(WrapperComp, { className: 'bar', childCount: 3 }));
            return expect(component, 'to have rendered', React.createElement(
                WrapperComp,
                { className: 'bar', childCount: 3 },
                React.createElement(
                    'span',
                    { className: '1' },
                    '1'
                ),
                React.createElement(
                    'span',
                    { className: '2' },
                    '2'
                ),
                React.createElement(
                    'span',
                    { className: '3' },
                    '3'
                )
            ));
        });

        it('updates on change', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(CustomComp, { className: 'bar', useEvents: true }));
            TestUtils.Simulate.click(React.findDOMNode(component));

            return expect(component, 'to have rendered', React.createElement('div', { className: 'bar', 'data-click-count': 1 }));
        });

        it('matches an expect.it assertion on a prop', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(CustomComp, { className: 'bar' }));

            return expect(component, 'to have rendered', React.createElement('div', { className: expect.it('to match', /bar/) }));
        });

        it('highlights a difference with an expect.it assertion on a prop', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(CustomComp, { className: 'bar' }));

            return expect(expect(component, 'to have rendered', React.createElement('div', { className: expect.it('to match', /foo/) })), 'to be rejected with', 'expected <CustomComp className="bar"><div className="bar" /></CustomComp>\n' + 'to have rendered <div className={expect.it(\'to match\', /foo/)} />\n' + '\n' + '<CustomComp className="bar">\n' + '  <div className="bar" // expected \'bar\' to match /foo/\n' + '  />\n' + '</CustomComp>');
        });

        it('highlights a difference with an expect.it assertion on content', function () {

            var component = TestUtils.renderIntoDocument(React.createElement(CustomComp, { className: 'bar', childCount: 1 }));
            return expect(function () {
                return expect(component, 'to have rendered', React.createElement(
                    'div',
                    null,
                    React.createElement(
                        'span',
                        null,
                        expect.it('to match', /[a-z]/)
                    )
                ));
            }, 'to error', 'expected\n' + '<CustomComp className="bar" childCount={1}>\n' + '  <div className="bar"><span className="1">1</span></div>\n' + '</CustomComp>\n' + 'to have rendered <div><span>{expect.it(\'to match\', /[a-z]/)}</span></div>\n' + '\n' + '<CustomComp className="bar" childCount={1}>\n' + '  <div className="bar">\n' + '    <span className="1">\n' + "      1 // expected '1' to match /[a-z]/\n" + '    </span>\n' + '  </div>\n' + '</CustomComp>');
        });
    });
});
//# sourceMappingURL=unexpected-react-deep.spec.js.map