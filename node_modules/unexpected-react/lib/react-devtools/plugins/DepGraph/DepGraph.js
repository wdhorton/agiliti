/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @ xx flow unused at the moment
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var decorate = require('../../frontend/decorate');
var crawlChildren = require('./crawlChildren');
var dagre = require('dagre');

var DepGraph = (function (_React$Component) {
  function DepGraph(props) {
    _classCallCheck(this, DepGraph);

    _get(Object.getPrototypeOf(DepGraph.prototype), 'constructor', this).call(this, props);
    this.state = { renderCount: 0 };
  }

  _inherits(DepGraph, _React$Component);

  _createClass(DepGraph, [{
    key: 'render',
    value: function render() {
      var _this = this;

      if (this.state.renderCount > 0) {
        return React.createElement(DepWrapper, {
          renderCount: this.state.renderCount,
          onClose: function () {
            return _this.setState({ renderCount: 0 });
          },
          onReload: function () {
            return _this.setState({ renderCount: _this.state.renderCount + 1 });
          }
        });
      }
      return React.createElement(
        'button',
        { onClick: function () {
            return _this.setState({ renderCount: 1 });
          } },
        'Calculate DepGraph'
      );
    }
  }]);

  return DepGraph;
})(React.Component);

var DisplayDeps = (function (_React$Component2) {
  function DisplayDeps() {
    _classCallCheck(this, DisplayDeps);

    if (_React$Component2 != null) {
      _React$Component2.apply(this, arguments);
    }
  }

  _inherits(DisplayDeps, _React$Component2);

  _createClass(DisplayDeps, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.selected !== this.props.selected) {
        return this.props.onClose();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        { style: styles.container },
        React.createElement(
          'div',
          { style: styles.scrollParent },
          React.createElement(SvgGraph, {
            onHover: this.props.onHover,
            onClick: this.props.onClick,
            graph: this.props.graph
          })
        ),
        React.createElement(
          'div',
          { style: styles.buttons },
          React.createElement(
            'button',
            { onClick: this.props.onReload },
            'Reload'
          ),
          React.createElement(
            'button',
            { onClick: this.props.onClose },
            'Ã—'
          )
        )
      );
    }
  }]);

  return DisplayDeps;
})(React.Component);

var SvgGraph = (function (_React$Component3) {
  function SvgGraph() {
    _classCallCheck(this, SvgGraph);

    if (_React$Component3 != null) {
      _React$Component3.apply(this, arguments);
    }
  }

  _inherits(SvgGraph, _React$Component3);

  _createClass(SvgGraph, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var graph = this.props.graph;
      if (!graph) {
        return React.createElement(
          'em',
          null,
          'No graph to display. Select something else'
        );
      }
      var transform = 'translate(10, 10)';
      return React.createElement(
        'svg',
        { style: styles.svg, width: graph.graph().width + 20, height: graph.graph().height + 20 },
        React.createElement(
          'g',
          { transform: transform },
          graph.edges().map(function (n) {
            var edge = graph.edge(n);
            return React.createElement('polyline', {
              points: edge.points.map(function (p) {
                return p.x + ',' + p.y;
              }).join(' '),
              fill: 'none',
              stroke: 'orange',
              strokeWidth: '2'
            });
          })
        ),
        React.createElement(
          'g',
          { transform: transform },
          graph.nodes().map(function (n) {
            var node = graph.node(n);
            return React.createElement('rect', {
              onMouseOver: _this2.props.onHover.bind(null, node.label),
              onMouseOut: _this2.props.onHover.bind(null, null),
              onClick: _this2.props.onClick.bind(null, node.label),
              height: node.height,
              width: node.width,
              x: node.x - node.width / 2,
              y: node.y - node.height / 2,
              style: styles.rect,
              fill: 'white',
              stroke: 'black',
              strokeWidth: '1'
            });
          })
        ),
        React.createElement(
          'g',
          { transform: transform },
          graph.nodes().map(function (n) {
            var node = graph.node(n);
            return React.createElement(
              'text',
              {
                style: { pointerEvents: 'none' },
                x: node.x,
                y: node.y + node.height / 4,
                textAnchor: 'middle',
                fontSize: '10',
                fontFamily: 'sans-serif'
              },
              node.label + ' ' + node.count
            );
          })
        )
      );
    }
  }]);

  return SvgGraph;
})(React.Component);

var styles = {
  container: {
    border: '1px solid red',
    position: 'relative',
    minWidth: 0,
    minHeight: 0,
    flex: 1 },

  scrollParent: {
    overflow: 'auto',
    top: 0,
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    textAlign: 'center' },

  rect: {
    cursor: 'pointer' },

  svg: {
    flexShrink: 0 },

  buttons: {
    position: 'absolute',
    bottom: 3,
    right: 3 } };

function dagrize(graph) {
  var g = new dagre.graphlib.Graph();
  g.setGraph({
    nodesep: 20,
    ranksep: 50 });
  g.setDefaultEdgeLabel(function () {
    return {};
  });
  var hasNodes = false;
  for (var nodeName in graph.nodes) {
    hasNodes = true;
    g.setNode(nodeName, {
      label: nodeName,
      count: graph.nodes[nodeName],
      width: nodeName.length * 7 + 20,
      height: 20 });
  }
  if (!hasNodes) {
    return false;
  }

  for (var edgeName in graph.edges) {
    var parts = edgeName.split('\u001f');
    if (parts[0] === '$root') {
      continue;
    }
    g.setEdge(parts[0], parts[1], { label: graph[edgeName] });
  }

  dagre.layout(g);
  return g;
}

var DepWrapper = decorate({
  listeners: function listeners() {
    return ['selected'];
  },
  shouldUpdate: function shouldUpdate(nextProps, props) {
    return nextProps.renderCount !== props.renderCount;
  },
  props: function props(store) {
    var graph = {
      edges: {},
      nodes: {} };
    crawlChildren('$root', [store.selected], store._nodes, 0, graph);
    return {
      selected: store.selected,
      graph: dagrize(graph),
      onHover: function onHover(name) {
        return store.hoverClass(name);
      },
      onClick: function onClick(name) {
        return store.selectFirstOfClass(name);
      } };
  } }, DisplayDeps);

module.exports = DepGraph;