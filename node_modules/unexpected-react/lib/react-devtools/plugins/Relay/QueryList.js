/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var React = require('react');
var decorate = require('../../frontend/decorate');
var Query = require('./Query');

var QueryList = (function () {
  function QueryList() {
    _classCallCheck(this, QueryList);
  }

  _createClass(QueryList, [{
    key: 'render',
    value: function render() {
      var _this = this;

      return React.createElement(
        'ul',
        { style: styles.list },
        this.props.queries.valueSeq().map(function (q) {
          return React.createElement(Query, {
            data: q,
            key: q.get('id'),
            isSelected: q.get('id') === _this.props.selectedQuery,
            onSelect: function () {
              return _this.props.selectQuery(q.get('id'));
            }
          });
        }).toArray(),
        !this.props.queries.count() && React.createElement(
          'li',
          { style: styles.empty },
          'No Relay Queries logged'
        )
      );
    }
  }]);

  return QueryList;
})();

var styles = {
  list: {
    listStyle: 'none',
    padding: 0,
    margin: 0,
    overflow: 'auto',
    minHeight: 0,
    flex: 1 },

  empty: {
    padding: 50,
    textAlign: 'center' } };

module.exports = decorate({
  store: 'relayStore',
  listeners: function listeners() {
    return ['queries', 'selectedQuery'];
  },
  props: function props(store, _props) {
    return {
      queries: store.queries,
      selectQuery: function selectQuery(id) {
        return store.selectQuery(id);
      },
      selectedQuery: store.selectedQuery };
  } }, QueryList);

// $FlowFixMe react element