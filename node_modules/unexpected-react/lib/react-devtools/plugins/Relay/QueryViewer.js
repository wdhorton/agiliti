/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var React = require('react');
var decorate = require('../../frontend/decorate');
var DataView = require('../../frontend/DataView/DataView');

var QueryViewer = (function () {
  function QueryViewer() {
    _classCallCheck(this, QueryViewer);
  }

  _createClass(QueryViewer, [{
    key: 'render',
    value: function render() {
      var data = this.props.data;
      var info = {};
      var type = data.get('type');
      if (type === 'mutation') {
        info.mutation = data.get('mutation');
      } else {
        info.query = data.get('query');
      }
      info.variables = data.get('variables');
      var status = data.get('status');
      if (status === 'success') {
        info.response = data.get('response');
      } else if (status === 'failure') {
        info.error = data.get('error');
      }
      return React.createElement(
        'div',
        { style: styles.container },
        React.createElement(
          'div',
          { style: styles.title },
          data.get('name')
        ),
        React.createElement(
          'div',
          { style: styles.time },
          new Date(data.get('start')).toLocaleTimeString()
        ),
        React.createElement(
          'div',
          { style: styles.duration },
          data.get('end') - data.get('start'),
          'ms'
        ),
        React.createElement(DataView, {
          data: info,
          noSort: true,
          readOnly: true,
          showMenu: false,
          inspect: this.props.inspect,
          path: []
        })
      );
    }
  }]);

  return QueryViewer;
})();

var styles = {
  container: {
    padding: '10px 20px',
    display: 'flex',
    flexDirection: 'column',
    overflow: 'auto',
    minHeight: 0,
    flex: 1 },

  title: {
    fontSize: 20,
    color: '#666',
    marginBottom: 15 },

  name: {},

  time: {
    padding: 10 },

  duration: {
    padding: 10 },

  status: {
    width: 20,
    height: 20,
    margin: 10,
    borderRadius: 25,
    backgroundColor: '#aaa' },

  variables: {
    whiteSpace: 'pre',
    fontFamily: 'monospace',
    wordWrap: 'break-word' },

  text: {
    whiteSpace: 'pre',
    fontFamily: 'monospace',
    wordWrap: 'break-word' } };

module.exports = decorate({
  store: 'relayStore',
  listeners: function listeners(props, store) {
    return ['selectedQuery', store.selectedQuery];
  },
  props: function props(store) {
    return {
      data: store.queries.get(store.selectedQuery),
      inspect: store.inspect.bind(store, store.selectedQuery) };
  } }, QueryViewer);