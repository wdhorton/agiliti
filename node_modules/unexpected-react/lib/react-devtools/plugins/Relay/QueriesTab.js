/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var React = require('react');
var decorate = require('../../frontend/decorate');
var QueryList = require('./QueryList');
var QueryViewer = require('./QueryViewer');
var SplitPane = require('../../frontend/SplitPane');

var QueriesTab = (function () {
  function QueriesTab() {
    _classCallCheck(this, QueriesTab);
  }

  _createClass(QueriesTab, [{
    key: 'render',
    value: function render() {
      var contents;
      if (!this.props.isSplit) {
        contents = React.createElement(QueryList, null);
      } else {
        contents = React.createElement(SplitPane, {
          initialWidth: 500,
          left: function () {
            return React.createElement(QueryList, null);
          },
          right: function () {
            return React.createElement(QueryViewer, null);
          }
        });
      }

      return React.createElement(
        'div',
        { style: styles.container },
        contents
      );
    }
  }]);

  return QueriesTab;
})();

var styles = {
  container: {
    fontFamily: 'Menlo, sans-serif',
    fontSize: 12,
    flex: 1,
    display: 'flex' } };

module.exports = decorate({
  store: 'relayStore',
  listeners: function listeners() {
    return ['selectedQuery'];
  },
  props: function props(store) {
    return {
      isSplit: !!store.selectedQuery };
  } }, QueriesTab);