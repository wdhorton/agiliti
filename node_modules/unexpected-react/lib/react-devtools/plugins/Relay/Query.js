/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var React = require('react');
var assign = require('object-assign');

var Query = (function () {
  function Query() {
    _classCallCheck(this, Query);
  }

  _createClass(Query, [{
    key: 'render',
    value: function render() {
      var data = this.props.data;
      var containerStyle = styles.container;
      if (this.props.isSelected) {
        containerStyle = _extends({}, styles.container, styles.selectedContainer);
      }
      var statusStyle = assign({}, styles.status, {
        backgroundColor: statusColors[data.get('status')] || statusColors.error });

      return React.createElement(
        'li',
        { onClick: this.props.onSelect, style: containerStyle },
        React.createElement('div', { style: statusStyle }),
        React.createElement(
          'div',
          { style: styles.name },
          data.get('name')
        ),
        React.createElement(
          'div',
          { style: styles.time },
          new Date(data.get('start')).toLocaleTimeString()
        ),
        React.createElement(
          'div',
          { style: styles.duration },
          data.get('end') - data.get('start'),
          'ms'
        )
      );
    }
  }]);

  return Query;
})();

var statusColors = {
  pending: 'orange',
  success: 'green',
  failure: 'red',
  error: '#aaa' };

var styles = {
  container: {
    padding: '10px 20px',
    cursor: 'pointer',
    display: 'flex',
    fontSize: 14 },

  selectedContainer: {
    backgroundColor: '#eef' },

  name: {
    flex: 1,
    fontSize: 16,
    padding: 10 },

  time: {
    padding: 10 },

  duration: {
    padding: 10 },

  status: {
    width: 20,
    height: 20,
    margin: 10,
    borderRadius: 25,
    backgroundColor: '#aaa' },

  text: {
    whiteSpace: 'pre',
    fontFamily: 'monospace',
    flex: 1 } };

module.exports = Query;