/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var React = require('react');
var decorate = require('../../frontend/decorate');

var ElementPanel = (function () {
  function ElementPanel() {
    _classCallCheck(this, ElementPanel);
  }

  _createClass(ElementPanel, [{
    key: 'render',
    value: function render() {
      var _this = this;

      if (!this.props.dataIDs.length) {
        return React.createElement('span', null);
      }
      return React.createElement(
        'div',
        null,
        'Relay Nodes',
        React.createElement(
          'ul',
          { style: styles.dataIDs },
          this.props.dataIDs.map(function (_ref) {
            var id = _ref.id;
            var queries = _ref.queries;
            return React.createElement(
              'li',
              { style: styles.dataNode },
              React.createElement(
                'div',
                { style: styles.dataID, onClick: function () {
                    return _this.props.jumpToData(id);
                  } },
                'ID: ',
                id
              ),
              React.createElement(
                'ul',
                { style: styles.queries },
                queries.map(function (query) {
                  return React.createElement(
                    'li',
                    { style: styles.queryID, onClick: function () {
                        return _this.props.jumpToQuery(query.get('id'));
                      } },
                    query.get('name')
                  );
                }),
                !queries.length && React.createElement(
                  'li',
                  { style: styles.noQueries },
                  'No Queries'
                )
              )
            );
          })
        )
      );
    }
  }]);

  return ElementPanel;
})();

var styles = {
  dataNode: {
    marginBottom: 5,
    border: '1px solid #ccc' },
  dataIDs: {
    listStyle: 'none',
    padding: 0,
    margin: 0 },
  queries: {
    listStyle: 'none',
    padding: 0,
    margin: 0 },
  dataID: {
    cursor: 'pointer',
    padding: '2px 4px',
    backgroundColor: '#ccc' },
  queryID: {
    cursor: 'pointer',
    padding: '2px 4px' },
  noQueries: {
    color: '#999',
    padding: '2px 4px' } };

module.exports = decorate({
  store: 'relayStore',
  listeners: function listeners(props, store) {
    return [props.id];
  },
  shouldUpdate: function shouldUpdate(props, prevProps) {
    return props.id !== prevProps.id;
  },
  props: function props(store, _props) {
    var dataIDs = [];
    if (store.nodesToDataIDs[_props.id]) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = store.nodesToDataIDs[_props.id][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var id = _step.value;

          dataIDs.push({
            id: id,
            queries: (store.queriesByDataID[id] || []).map(function (qid) {
              return store.queries.get(qid);
            }) });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
    return {
      dataIDs: dataIDs,
      jumpToData: function jumpToData(dataID) {
        return store.jumpToDataID(dataID);
      },
      jumpToQuery: function jumpToQuery(queryID) {
        return store.jumpToQuery(queryID);
      } };
  } }, ElementPanel);