/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

function decorate(obj, attr, fn) {
  var old = obj[attr];
  obj[attr] = function () {
    var res = old.apply(this, arguments);
    fn.apply(this, arguments);
    return res;
  };
  return function () {
    return obj[attr] = old;
  };
}

function makeId() {
  return Math.random().toString(16);
}

module.exports = function (bridge, agent, hook) {
  var shouldEnable = !!(hook._relayInternals && window.location.hash.indexOf('relaydevtools') >= 0);

  bridge.onCall('relay:check', function () {
    return shouldEnable;
  });
  if (!shouldEnable) {
    return;
  }
  var NetworkLayer = hook._relayInternals.NetworkLayer;

  bridge.send('relay:store', { id: 'relay:store', nodes: hook._relayInternals.DefaultStoreData.getNodeData() });
  var restore = [decorate(NetworkLayer, 'sendMutation', function (mut) {
    var id = makeId();
    var start = Date.now();
    bridge.send('relay:pending', {
      id: id,
      type: 'mutation',
      start: start,
      mutation: mut._mutation,
      text: mut.getQueryString(),
      variables: mut.getVariables(),
      name: mut.getDebugName() });
    mut.then(function (response) {
      return bridge.send('relay:success', { id: id, response: response.response, end: Date.now() });
    }, function (error) {
      return bridge.send('relay:failure', { id: id, error: error, end: Date.now() });
    });
  }), decorate(NetworkLayer, 'sendQueries', function (queries) {
    bridge.send('relay:pending', queries.map(function (q) {
      var id = makeId();
      q.then(function (response) {
        return bridge.send('relay:success', { id: id, response: response.response, end: Date.now() });
      }, function (error) {
        return bridge.send('relay:failure', { id: id, error: error, end: Date.now() });
      });
      return {
        id: id,
        type: 'query',
        start: Date.now(),
        query: q._query,
        text: q.getQueryString(),
        variables: q.getVariables(),
        name: q.getDebugName() };
    }));
  })];
  hook.on('shutdown', function () {
    restore.forEach(function (fn) {
      return fn();
    });
  });
};