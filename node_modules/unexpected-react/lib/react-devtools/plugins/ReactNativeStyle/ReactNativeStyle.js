/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var StyleEdit = require('./StyleEdit');

function shallowClone(obj) {
  var nobj = {};
  for (var n in obj) {
    nobj[n] = obj[n];
  }
  return nobj;
}

var NativeStyler = (function (_React$Component) {
  function NativeStyler(props) {
    _classCallCheck(this, NativeStyler);

    _get(Object.getPrototypeOf(NativeStyler.prototype), 'constructor', this).call(this, props);
    this.state = { style: null };
  }

  _inherits(NativeStyler, _React$Component);

  _createClass(NativeStyler, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this = this;

      this.props.bridge.call('rn-style:get', this.props.id, function (style) {
        _this.setState({ style: style });
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (nextProps.id === this.props.id) {
        return;
      }
      this.setState({ style: null });
      this.props.bridge.call('rn-style:get', nextProps.id, function (style) {
        _this2.setState({ style: style });
      });
    }
  }, {
    key: '_handleStyleChange',
    value: function _handleStyleChange(attr, val) {
      this.state.style[attr] = val;
      this.props.bridge.send('rn-style:set', { id: this.props.id, attr: attr, val: val });
      this.setState({ style: this.state.style });
    }
  }, {
    key: '_handleStyleRename',
    value: function _handleStyleRename(oldName, newName, val) {
      var style = shallowClone(this.state.style);
      delete style[oldName];
      style[newName] = val;
      this.props.bridge.send('rn-style:rename', { id: this.props.id, oldName: oldName, newName: newName, val: val });
      this.setState({ style: style });
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.state.style) {
        return React.createElement(
          'em',
          null,
          'loading'
        );
      }
      return React.createElement(StyleEdit, {
        style: this.state.style,
        onRename: this._handleStyleRename.bind(this),
        onChange: this._handleStyleChange.bind(this)
      });
    }
  }]);

  return NativeStyler;
})(React.Component);

module.exports = NativeStyler;