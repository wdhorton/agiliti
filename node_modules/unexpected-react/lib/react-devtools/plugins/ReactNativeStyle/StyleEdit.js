/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var BlurInput = require('./BlurInput');

var StyleEdit = (function (_React$Component) {
  function StyleEdit(props) {
    _classCallCheck(this, StyleEdit);

    _get(Object.getPrototypeOf(StyleEdit.prototype), 'constructor', this).call(this, props);
    this.state = { newAttr: '', newValue: '' };
  }

  _inherits(StyleEdit, _React$Component);

  _createClass(StyleEdit, [{
    key: 'onNew',
    value: function onNew(val) {
      this.props.onChange(this.state.newAttr, val);
      this.setState({ newAttr: '', newValue: '' });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      var attrs = Object.keys(this.props.style);
      return React.createElement(
        'ul',
        { style: styles.container },
        attrs.map(function (name) {
          return React.createElement(
            'li',
            { style: styles.attr },
            React.createElement(BlurInput, {
              value: name,
              onChange: function (newName) {
                return _this.props.onRename(name, newName, _this.props.style[name]);
              }
            }),
            ':',
            React.createElement(BlurInput, {
              value: _this.props.style[name],
              onChange: function (val) {
                return _this.props.onChange(name, val);
              }
            })
          );
        }),
        React.createElement(
          'li',
          { style: styles.attr },
          React.createElement(BlurInput, {
            value: this.state.newAttr,
            onChange: function (newAttr) {
              return _this.setState({ newAttr: newAttr });
            }
          }),
          ':',
          this.state.newAttr && React.createElement(BlurInput, {
            value: '',
            onChange: function (val) {
              return _this.onNew(val);
            }
          })
        )
      );
    }
  }]);

  return StyleEdit;
})(React.Component);

var styles = {
  container: {
    listStyle: 'none',
    padding: 0,
    margin: 0 },
  attr: {
    padding: 2 } };

module.exports = StyleEdit;