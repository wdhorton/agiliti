/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _defineProperty(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');

module.exports = function (name) {
  var Wrapper = (function (_React$Component) {
    function Wrapper() {
      _classCallCheck(this, Wrapper);

      if (_React$Component != null) {
        _React$Component.apply(this, arguments);
      }
    }

    _inherits(Wrapper, _React$Component);

    _createClass(Wrapper, [{
      key: 'getChildContext',
      value: function getChildContext() {
        // $FlowFixMe computed property
        return _defineProperty({}, name, this.props.store);
      }
    }, {
      key: 'render',
      value: function render() {
        return this.props.children();
      }
    }]);

    return Wrapper;
  })(React.Component);

  Wrapper.childContextTypes = _defineProperty({}, name, React.PropTypes.object);
  Wrapper.displayName = 'StoreProvider(' + name + ')';
  return Wrapper;
};

// $FlowFixMe computed property