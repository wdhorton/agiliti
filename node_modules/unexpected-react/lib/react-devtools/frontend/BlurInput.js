/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');

var BlurInput = (function (_React$Component) {
  function BlurInput(props) {
    _classCallCheck(this, BlurInput);

    _get(Object.getPrototypeOf(BlurInput.prototype), 'constructor', this).call(this, props);
    this.state = { text: this.props.value || '' };
  }

  _inherits(BlurInput, _React$Component);

  _createClass(BlurInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value !== this.props.value) {
        this.setState({ text: '' + nextProps.value });
      }
    }
  }, {
    key: 'done',
    value: function done() {
      if (this.state.text !== (this.props.value || '')) {
        this.props.onChange(this.state.text);
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      if (e.key === 'Enter') {
        this.done();
        return;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      return React.createElement('input', {
        value: this.state.text,
        ref: function (i) {
          return _this.node = i;
        },
        onChange: function (e) {
          return _this.setState({ text: e.target.value });
        },
        onBlur: this.done.bind(this),
        onKeyDown: function (e) {
          return _this.onKeyDown(e);
        }
      });
    }
  }]);

  return BlurInput;
})(React.Component);

module.exports = BlurInput;