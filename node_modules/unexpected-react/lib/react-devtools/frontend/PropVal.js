/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react/addons');
var consts = require('../agent/consts');
var valueStyles = require('./value-styles');
var flash = require('./flash');

var PropVal = (function (_React$Component) {
  function PropVal() {
    _classCallCheck(this, PropVal);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(PropVal, _React$Component);

  _createClass(PropVal, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.val === prevProps.val) {
        return;
      }
      if (this.props.val && prevProps.val && typeof this.props.val === 'object' && typeof prevProps.val === 'object') {
        return;
      }
      var node = React.findDOMNode(this);
      flash(node, 'rgba(0,255,0,1)', 'transparent', 1);
    }
  }, {
    key: 'render',
    value: function render() {
      return previewProp(this.props.val, this.props.nested);
    }
  }]);

  return PropVal;
})(React.Component);

function previewProp(val, nested) {
  if (typeof val === 'number') {
    return React.createElement(
      'span',
      { style: valueStyles.number },
      val
    );
  }
  if (typeof val === 'string') {
    if (val.length > 50) {
      val = val.slice(0, 50) + '…';
    }
    return React.createElement(
      'span',
      { style: valueStyles.string },
      '"',
      val,
      '"'
    );
  }
  if (typeof val === 'boolean') {
    return React.createElement(
      'span',
      { style: valueStyles.bool },
      '' + val
    );
  }
  if (Array.isArray(val)) {
    if (nested) {
      return React.createElement(
        'span',
        { style: valueStyles.array },
        '[(',
        val.length,
        ')]'
      );
    }
    return previewArray(val);
  }
  if (!val) {
    return React.createElement(
      'span',
      { style: valueStyles.empty },
      '' + val
    );
  }
  if (typeof val !== 'object') {
    return React.createElement(
      'span',
      null,
      '…'
    );
  }
  if (val[consts.type]) {
    var type = val[consts.type];
    if (type === 'function') {
      return React.createElement(
        'span',
        { style: valueStyles.func },
        val[consts.name] || 'fn',
        '()'
      );
    }
    if (type === 'object') {
      return React.createElement(
        'span',
        null,
        val[consts.name] + '{}'
      );
    }
    if (type === 'array') {
      return React.createElement(
        'span',
        null,
        'Array[',
        val[consts.meta].length,
        ']'
      );
    }
    if (type === 'symbol') {
      // the name is "Symbol(something)"
      return React.createElement(
        'span',
        { style: valueStyles.symbol },
        val[consts.name]
      );
    }
  }
  if (nested) {
    return React.createElement(
      'span',
      null,
      '{…}'
    );
  }
  return previewObject(val);
}

function previewArray(val) {
  var items = {};
  val.slice(0, 3).forEach(function (item, i) {
    items['n' + i] = React.createElement(PropVal, { val: item, nested: true });
    items['c' + i] = ',';
  });
  if (val.length > 3) {
    items.last = '…';
  } else {
    delete items['c' + (val.length - 1)];
  }
  return React.createElement(
    'span',
    { style: valueStyles.array },
    '[',
    React.addons.createFragment(items),
    ']'
  );
}

function previewObject(val) {
  var names = Object.keys(val);
  var items = {};
  names.slice(0, 3).forEach(function (name, i) {
    items['k' + i] = React.createElement(
      'span',
      { style: valueStyles.attr },
      name
    );
    items['c' + i] = ': ';
    items['v' + i] = React.createElement(PropVal, { val: val[name], nested: true });
    items['m' + i] = ', ';
  });
  if (names.length > 3) {
    items.rest = '…';
  } else {
    delete items['m' + (names.length - 1)];
  }
  return React.createElement(
    'span',
    { style: valueStyles.object },
    '{',
    React.addons.createFragment(items),
    '}'
  );
}

module.exports = PropVal;