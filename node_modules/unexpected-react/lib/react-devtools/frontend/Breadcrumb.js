/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var assign = require('object-assign');
var decorate = require('./decorate');

var Breadcrumb = (function (_React$Component) {
  function Breadcrumb() {
    _classCallCheck(this, Breadcrumb);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(Breadcrumb, _React$Component);

  _createClass(Breadcrumb, [{
    key: 'render',
    value: function render() {
      var _this = this;

      return React.createElement(
        'ul',
        { style: styles.container },
        this.props.path.map(function (_ref) {
          var id = _ref.id;
          var node = _ref.node;

          var isSelected = id === _this.props.selected;
          var style = assign({}, styles.item, node.get('nodeType') === 'Composite' && styles.composite, isSelected && styles.selected);
          return React.createElement(
            'li',
            {
              style: style,
              onMouseOver: function () {
                return _this.props.hover(id, true);
              },
              onMouseOut: function () {
                return _this.props.hover(id, false);
              },
              onClick: isSelected ? null : function () {
                return _this.props.select(id);
              }
            },
            node.get('name') || '"' + node.get('text') + '"'
          );
        })
      );
    }
  }]);

  return Breadcrumb;
})(React.Component);

var styles = {
  container: {
    borderTop: '1px solid #ccc',
    backgroundColor: 'white',
    listStyle: 'none',
    padding: 0,
    margin: 0 },

  selected: {
    cursor: 'default',
    backgroundColor: 'rgb(56, 121, 217)',
    color: 'white' },

  composite: {
    color: 'rgb(136, 18, 128)' },

  item: {
    padding: '3px 7px',
    cursor: 'pointer',
    display: 'inline-block' } };

function getBreadcrumbPath(store) {
  var path = [];
  var current = store.breadcrumbHead;
  while (current) {
    path.unshift({
      id: current,
      node: store.get(current) });
    current = store.skipWrapper(store.getParent(current), true);
  }
  return path;
}

module.exports = decorate({
  listeners: function listeners() {
    return ['breadcrumbHead', 'selected'];
  },
  props: function props(store, _props) {
    return {
      select: function select(id) {
        return store.selectBreadcrumb(id);
      },
      hover: function hover(id, isHovered) {
        return store.setHover(id, isHovered);
      },
      selected: store.selected,
      path: getBreadcrumbPath(store) };
  } }, Breadcrumb);