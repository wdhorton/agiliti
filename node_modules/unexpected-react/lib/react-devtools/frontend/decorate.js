/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _defineProperty(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');

/**
 * This Higher Order Component decorator function is the way the components
 * communicate with the central Store.
 *
 * Example:
 *
 * class MyComp {
 *   render() {
 *     return (
 *       <div>
 *         Hello {this.props.name}.
 *         <button onClick={this.props.sayHi}>Hi back</button>
 *       </div>
 *     );
 *   }
 * }
 *
 * module.exports = decorate({
 *   listeners: () => ['nameChanged'],
 *   props(store) {
 *     return {
 *       name: store.name,
 *       sayHi: () => store.sayHi(),
 *     };
 *   },
 * }, MyComp);
 */
module.exports = function (options, Component) {
  var storeKey = options.store || 'store';

  var Wrapper = (function (_React$Component) {
    function Wrapper(props) {
      _classCallCheck(this, Wrapper);

      _get(Object.getPrototypeOf(Wrapper.prototype), 'constructor', this).call(this, props);
      this.state = {};
    }

    _inherits(Wrapper, _React$Component);

    _createClass(Wrapper, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var _this = this;

        if (!this.context[storeKey]) {
          return console.warn('no store on context...');
        }
        this._update = function () {
          return _this.forceUpdate();
        };
        if (!options.listeners) {
          return undefined;
        }
        this._listeners = options.listeners(this.props, this.context[storeKey]);
        this._listeners.forEach(function (evt) {
          _this.context[storeKey].on(evt, _this._update);
        });
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        var _this2 = this;

        if (!this.context[storeKey]) {
          return console.warn('no store on context...');
        }
        this._listeners.forEach(function (evt) {
          _this2.context[storeKey].off(evt, _this2._update);
        });
      }
    }, {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (nextState !== this.state) {
          return true;
        }
        if (options.shouldUpdate) {
          return options.shouldUpdate(nextProps, this.props);
        }
        return false;
      }
    }, {
      key: 'componentWillUpdate',
      value: function componentWillUpdate(nextProps, nextState) {
        var _this3 = this;

        if (!this.context[storeKey]) {
          return console.warn('no store on context...');
        }
        if (!options.listeners) {
          return undefined;
        }
        var listeners = options.listeners(this.props, this.context[storeKey]);
        var diff = arrayDiff(listeners, this._listeners);
        diff.missing.forEach(function (name) {
          _this3.context[storeKey].off(name, _this3._update);
        });
        diff.newItems.forEach(function (name) {
          _this3.context[storeKey].on(name, _this3._update);
        });
        this._listeners = listeners;
      }
    }, {
      key: 'render',
      value: function render() {
        var store = this.context[storeKey];
        var props = store && options.props(store, this.props);
        return React.createElement(Component, _extends({}, props, this.props));
      }
    }]);

    return Wrapper;
  })(React.Component);

  Wrapper.contextTypes = _defineProperty({}, storeKey, React.PropTypes.object);

  Wrapper.displayName = 'Wrapper(' + Component.name + ')';

  return Wrapper;
};

function arrayDiff(array, oldArray) {
  var names = new Set();
  var missing = [];
  for (var i = 0; i < array.length; i++) {
    names.add(array[i]);
  }
  for (var j = 0; j < oldArray.length; j++) {
    if (!names.has(oldArray[j])) {
      missing.push(oldArray[j]);
    } else {
      names['delete'](oldArray[j]);
    }
  }
  return {
    missing: missing,
    newItems: setToArray(names) };
}

function setToArray(set) {
  var res = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = set[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var val = _step.value;

      res.push(val);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return res;
}

/** A function determining whether the component should rerender when the
 * parent rerenders. Defaults to function returning false **/

/** A function returning a list of events to listen to **/

/** This is how you get data and action handlers from the store. The
 * returned object will be spread in as props on the wrapped component. **/

// $FlowFixMe computed property