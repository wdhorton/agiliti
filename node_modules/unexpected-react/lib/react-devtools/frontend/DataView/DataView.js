/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var Simple = require('./Simple');

var assign = require('object-assign');
var consts = require('../../agent/consts');
var previewComplex = require('./previewComplex');

var DataView = (function (_React$Component) {
  function DataView() {
    _classCallCheck(this, DataView);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(DataView, _React$Component);

  _createClass(DataView, [{
    key: 'render',
    value: function render() {
      var _this = this;

      var data = this.props.data;
      if (!data) {
        return React.createElement(
          'div',
          { style: styles.missing },
          'null'
        );
      }
      var names = Object.keys(data);
      if (!this.props.noSort) {
        names.sort();
      }
      var path = this.props.path;
      if (!names.length) {
        return React.createElement(
          'span',
          { style: styles.empty },
          'Empty object'
        );
      }

      return React.createElement(
        'ul',
        { style: styles.container },
        data[consts.proto] && React.createElement(DataItem, {
          name: '__proto__',
          path: path.concat(['__proto__']),
          key: '__proto__',
          startOpen: this.props.startOpen,
          inspect: this.props.inspect,
          showMenu: this.props.showMenu,
          readOnly: this.props.readOnly,
          value: this.props.data[consts.proto]
        }),
        names.map(function (name, i) {
          return React.createElement(DataItem, {
            name: name,
            path: path.concat([name]),
            key: name,
            startOpen: _this.props.startOpen,
            inspect: _this.props.inspect,
            showMenu: _this.props.showMenu,
            readOnly: _this.props.readOnly,
            value: _this.props.data[name]
          });
        })
      );
    }
  }]);

  return DataView;
})(React.Component);

var DataItem = (function (_React$Component2) {
  function DataItem(props) {
    _classCallCheck(this, DataItem);

    _get(Object.getPrototypeOf(DataItem.prototype), 'constructor', this).call(this, props);
    this.state = { open: this.props.startOpen, loading: false };
  }

  _inherits(DataItem, _React$Component2);

  _createClass(DataItem, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.state.open && this.props.value && this.props.value[consts.inspected] === false) {
        this.inspect();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.open && nextProps.value && nextProps.value[consts.inspected] === false) {
        this.inspect();
      }
    }
  }, {
    key: 'inspect',
    value: function inspect() {
      var _this2 = this;

      this.setState({ loading: true, open: true });
      this.props.inspect(this.props.path, function () {
        _this2.setState({ loading: false });
      });
    }
  }, {
    key: 'toggleOpen',
    value: function toggleOpen() {
      if (this.state.loading) {
        return;
      }
      if (this.props.value && this.props.value[consts.inspected] === false) {
        this.inspect();
        return;
      }

      this.setState({
        open: !this.state.open });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var data = this.props.value;
      var otype = typeof data;

      var complex = true;
      var preview;
      if (otype === 'number' || otype === 'string' || data == null /* null or undefined */ || otype === 'boolean') {
        preview = React.createElement(Simple, {
          readOnly: this.props.readOnly,
          path: this.props.path,
          data: data
        });
        complex = false;
      } else {
        preview = previewComplex(data);
      }

      var open = this.state.open && (!data || data[consts.inspected] !== false);

      var opener = null;
      if (complex) {
        opener = React.createElement(
          'div',
          {
            onClick: this.toggleOpen.bind(this),
            style: styles.opener },
          open ? React.createElement(
            'span',
            null,
            '▼'
          ) : React.createElement(
            'span',
            null,
            '▶'
          )
        );
      }

      var children = null;
      if (complex && open) {
        // TODO path
        children = React.createElement(
          'div',
          { style: styles.children },
          React.createElement(DataView, {
            data: this.props.value,
            path: this.props.path,
            inspect: this.props.inspect,
            showMenu: this.props.showMenu,
            readOnly: this.props.readOnly
          })
        );
      }

      var name = this.props.name;
      if (name.length > 50) {
        name = name.slice(0, 50) + '…';
      }

      return React.createElement(
        'li',
        null,
        React.createElement(
          'div',
          { style: styles.head },
          opener,
          React.createElement(
            'div',
            {
              style: assign({}, styles.name, complex && styles.complexName),
              onClick: this.toggleOpen.bind(this)
            },
            this.props.name,
            ':'
          ),
          React.createElement(
            'div',
            {
              onContextMenu: function (e) {
                return _this3.props.showMenu(e, _this3.props.value, _this3.props.path, _this3.props.name);
              },
              style: styles.preview
            },
            preview
          )
        ),
        children
      );
    }
  }]);

  return DataItem;
})(React.Component);

var styles = {
  container: {
    listStyle: 'none',
    margin: 0,
    padding: 0,
    marginLeft: 10 },

  children: {},

  empty: {
    fontSize: 12,
    marginLeft: 20,
    padding: '2px 5px',
    color: '#aaa' },

  missing: {
    fontSize: 12,
    fontWeight: 'bold',
    marginLeft: 20,
    padding: '2px 5px',
    color: '#888' },

  opener: {
    fontSize: 8,
    cursor: 'pointer',
    position: 'absolute',
    right: '100%',
    padding: '5px 0' },

  head: {
    display: 'flex',
    position: 'relative' },

  name: {
    color: '#666',
    margin: '2px 3px' },

  complexName: {
    cursor: 'pointer' },

  preview: {
    display: 'flex',
    margin: '2px 3px',
    whiteSpace: 'pre',
    wordBreak: 'break-word',
    flex: 1 },

  value: {} };

module.exports = DataView;