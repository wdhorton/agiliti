/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');

var assign = require('object-assign');
var flash = require('../flash');
var valueStyles = require('../value-styles');

var Simple = (function (_React$Component) {
  function Simple(props) {
    _classCallCheck(this, Simple);

    _get(Object.getPrototypeOf(Simple.prototype), 'constructor', this).call(this, props);
    this.state = {
      editing: false };
  }

  _inherits(Simple, _React$Component);

  _createClass(Simple, [{
    key: 'onChange',
    value: function onChange(e) {
      this.setState({
        text: e.target.value });
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      if (e.key === 'Enter') {
        this.onSubmit(true);
      }
      if (e.key === 'Escape') {
        this.setState({
          editing: false });
      }
    }
  }, {
    key: 'onSubmit',
    value: function onSubmit(editing) {
      if (this.state.text === valueToText(this.props.data)) {
        this.setState({
          editing: editing });
        return;
      }
      var value = textToValue(this.state.text);
      if (value === BAD_INPUT) {
        this.setState({
          text: valueToText(this.props.data),
          editing: editing });
        return;
      }
      this.context.onChange(this.props.path, value);
      this.setState({
        editing: editing });
    }
  }, {
    key: 'startEditing',
    value: function startEditing() {
      if (this.props.readOnly) {
        return;
      }
      this.setState({
        editing: true,
        text: valueToText(this.props.data) });
    }
  }, {
    key: 'selectAll',
    value: function selectAll() {
      var node = React.findDOMNode(this.input);
      node.selectionStart = 0;
      node.selectionEnd = node.value.length;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.state.editing && !prevState.editing) {
        this.selectAll();
      }
      if (!this.state.editing && this.props.data !== prevProps.data) {
        flash(React.findDOMNode(this), 'rgba(0, 255, 0, 1)', 'transparent', 1);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      if (this.state.editing) {
        return React.createElement('input', {
          autoFocus: true,
          ref: function (i) {
            return _this.input = i;
          },
          style: styles.input,
          onChange: function (e) {
            return _this.onChange(e);
          },
          onBlur: function () {
            return _this.onSubmit(false);
          },
          onKeyDown: this.onKeyDown.bind(this),
          value: this.state.text
        });
      }

      var data = this.props.data;
      var type = typeof data;
      var style = styles.simple;
      var typeStyle;
      if (type === 'boolean') {
        typeStyle = valueStyles.bool;
      } else if (!this.props.data) {
        typeStyle = valueStyles.empty;
      } else if (type === 'string') {
        typeStyle = valueStyles.string;
        if (data.length > 200) {
          data = data.slice(0, 200) + 'â€¦';
        }
      } else if (type === 'number') {
        typeStyle = valueStyles.number;
      }
      style = assign({}, style, typeStyle);
      if (!this.props.readOnly) {
        assign(style, styles.editable);
      }
      return React.createElement(
        'div',
        {
          onClick: this.startEditing.bind(this),
          style: style },
        valueToText(data)
      );
    }
  }]);

  return Simple;
})(React.Component);

Simple.propTypes = {
  data: React.PropTypes.any,
  path: React.PropTypes.array,
  readOnly: React.PropTypes.bool };

Simple.contextTypes = {
  onChange: React.PropTypes.func };

var styles = {
  simple: {
    display: 'flex',
    flex: 1,
    whiteSpace: 'pre-wrap' },

  editable: {
    cursor: 'pointer' },

  input: {
    flex: 1,
    minWidth: 50,
    boxSizing: 'border-box',
    border: 'none',
    padding: 0,
    outline: 'none',
    boxShadow: '0 0 3px #ccc',
    fontFamily: 'monospace',
    fontSize: 'inherit' } };

var BAD_INPUT = Symbol('bad input');

function textToValue(txt) {
  if (!txt.length) {
    return BAD_INPUT;
  }
  if (txt === 'undefined') {
    return undefined;
  }
  try {
    return JSON.parse(txt);
  } catch (e) {
    return BAD_INPUT;
  }
}

function valueToText(value) {
  if (value === undefined) {
    return 'undefined';
  }
  return JSON.stringify(value);
}

module.exports = Simple;