/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var assign = require('object-assign');
var decorate = require('./decorate');

var TabbedPane = (function (_React$Component) {
  function TabbedPane() {
    _classCallCheck(this, TabbedPane);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(TabbedPane, _React$Component);

  _createClass(TabbedPane, [{
    key: 'render',
    value: function render() {
      var _this = this;

      var tabs = Object.keys(this.props.tabs);
      if (tabs.length === 1) {
        return this.props.tabs[tabs[0]]();
      }
      return React.createElement(
        'div',
        { style: styles.container },
        React.createElement(
          'ul',
          { style: styles.tabs },
          tabs.map(function (name, i) {
            var style = styles.tab;
            if (name === _this.props.selected) {
              style = assign({}, style, styles.selectedTab);
            }
            if (i === tabs.length - 1) {
              style = assign({}, style, styles.lastTab);
            }
            return React.createElement(
              'li',
              { key: name + i, style: style, onClick: function () {
                  return _this.props.setSelectedTab(name);
                } },
              name
            );
          })
        ),
        React.createElement(
          'div',
          { style: styles.body },
          this.props.tabs[this.props.selected]()
        )
      );
    }
  }]);

  return TabbedPane;
})(React.Component);

var styles = {
  container: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column' },
  tabs: {
    display: 'flex',
    flexShrink: 0,
    listStyle: 'none',
    backgroundColor: '#eee',
    borderBottom: '1px solid rgb(163, 163, 163)',
    margin: 0,
    padding: '0 2px' },
  tab: {
    padding: '2px 4px',
    lineHeight: '15px',
    fontSize: 12,
    fontFamily: '\'Lucida Grande\', sans-serif',
    cursor: 'pointer',
    borderLeft: '1px solid rgb(163, 163, 163)' },
  lastTab: {
    borderRight: '1px solid rgb(163, 163, 163)' },
  selectedTab: {
    backgroundColor: 'white' },
  body: {
    flex: 1,
    display: 'flex',
    minHeight: 0 } };

module.exports = decorate({
  listeners: function listeners() {
    return ['selectedTab'];
  },
  shouldUpdate: function shouldUpdate(props, prevProps) {
    for (var name in props) {
      if (props[name] !== prevProps[name]) {
        return true;
      }
    }
    return false;
  },
  props: function props(store) {
    return {
      selected: store.selectedTab,
      setSelectedTab: function setSelectedTab(name) {
        return store.setSelectedTab(name);
      } };
  } }, TabbedPane);