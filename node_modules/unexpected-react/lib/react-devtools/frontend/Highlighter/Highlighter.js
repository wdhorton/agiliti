/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Overlay = require('./Overlay');
var MultiOverlay = require('./MultiOverlay');

/**
 * Manages the highlighting of items on an html page, as well as
 * hover-to-inspect.
 */

var Highlighter = (function () {
  function Highlighter(win, onSelect) {
    _classCallCheck(this, Highlighter);

    this._win = win;
    this._onSelect = onSelect;
    this._overlay = null;
    this._multiOverlay = null;
    this._subs = [];
  }

  _createClass(Highlighter, [{
    key: 'startInspecting',
    value: function startInspecting() {
      this._inspecting = true;
      this._subs = [captureSubscription(this._win, 'mouseover', this.onHover.bind(this)), captureSubscription(this._win, 'mousedown', this.onMouseDown.bind(this)), captureSubscription(this._win, 'click', this.onClick.bind(this))];
    }
  }, {
    key: 'stopInspecting',
    value: function stopInspecting() {
      this._subs.forEach(function (unsub) {
        return unsub();
      });
      this.hideHighlight();
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.stopInspecting();
      if (this._button && this._button.parentNode) {
        this._button.parentNode.removeChild(this._button);
      }
    }
  }, {
    key: 'highlight',
    value: function highlight(node, name) {
      this.removeMultiOverlay();
      if (!this._overlay) {
        this._overlay = new Overlay(this._win);
      }
      // $FlowFixMe this._overlay is clearly not null at this point
      this._overlay.inspect(node, name);
    }
  }, {
    key: 'highlightMany',
    value: function highlightMany(nodes) {
      this.removeOverlay();
      if (!this._multiOverlay) {
        this._multiOverlay = new MultiOverlay(this._win);
      }
      // $FlowFixMe this._multiOverlay is clearly not null at this point
      this._multiOverlay.highlightMany(nodes);
    }
  }, {
    key: 'hideHighlight',
    value: function hideHighlight() {
      this._inspecting = false;
      this.removeOverlay();
      this.removeMultiOverlay();
    }
  }, {
    key: 'removeOverlay',
    value: function removeOverlay() {
      if (!this._overlay) {
        return;
      }
      this._overlay.remove();
      this._overlay = null;
    }
  }, {
    key: 'removeMultiOverlay',
    value: function removeMultiOverlay() {
      if (!this._multiOverlay) {
        return;
      }
      this._multiOverlay.remove();
      this._multiOverlay = null;
    }
  }, {
    key: 'onMouseDown',
    value: function onMouseDown(evt) {
      if (!this._inspecting) {
        return;
      }
      evt.preventDefault();
      evt.stopPropagation();
      evt.cancelBubble = true;
      this._onSelect(evt.target);
      return;
    }
  }, {
    key: 'onClick',
    value: function onClick(evt) {
      if (!this._inspecting) {
        return;
      }
      this._subs.forEach(function (unsub) {
        return unsub();
      });
      evt.preventDefault();
      evt.stopPropagation();
      evt.cancelBubble = true;
      this.hideHighlight();
    }
  }, {
    key: 'onHover',
    value: function onHover(evt) {
      if (!this._inspecting) {
        return;
      }
      evt.preventDefault();
      evt.stopPropagation();
      evt.cancelBubble = true;
      this.highlight(evt.target);
    }
  }, {
    key: 'injectButton',
    value: function injectButton() {
      this._button = makeMagnifier();
      this._button.onclick = this.startInspecting.bind(this);
      this._win.document.body.appendChild(this._button);
    }
  }]);

  return Highlighter;
})();

function captureSubscription(obj, evt, cb) {
  obj.addEventListener(evt, cb, true);
  return function () {
    return obj.removeEventListener(evt, cb, true);
  };
}

function makeMagnifier() {
  var button = window.document.createElement('button');
  button.innerHTML = '&#128269;';
  button.style.backgroundColor = 'transparent';
  button.style.border = 'none';
  button.style.outline = 'none';
  button.style.cursor = 'pointer';
  button.style.position = 'fixed';
  button.style.bottom = '10px';
  button.style.right = '10px';
  button.style.fontSize = '30px';
  button.style.zIndex = 10000000;
  return button;
}

module.exports = Highlighter;