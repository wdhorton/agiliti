/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var Node = require('./Node');
var Breadcrumb = require('./Breadcrumb');

var decorate = require('./decorate');

var MAX_SEARCH_ROOTS = 200;

var TreeView = (function (_React$Component) {
  function TreeView() {
    _classCallCheck(this, TreeView);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(TreeView, _React$Component);

  _createClass(TreeView, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        scrollTo: this.scrollTo.bind(this) };
    }
  }, {
    key: 'scrollTo',
    value: function scrollTo(val, height) {
      var node = React.findDOMNode(this);
      var top = node.scrollTop;
      var rel = val - node.offsetTop;
      var margin = 40;
      if (top > rel - margin) {
        node.scrollTop = rel - margin;
      } else if (top + node.offsetHeight < rel + height + margin) {
        node.scrollTop = rel - node.offsetHeight + height + margin;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.props.roots.count()) {
        if (this.props.searching) {
          return React.createElement(
            'div',
            { style: styles.container },
            React.createElement(
              'span',
              null,
              'No search results'
            )
          );
        } else {
          return React.createElement(
            'div',
            { style: styles.container },
            React.createElement(
              'span',
              null,
              'Waiting for roots to load...',
              this.props.reload && React.createElement(
                'span',
                null,
                'to reload the inspector ',
                React.createElement(
                  'button',
                  { onClick: this.props.reload },
                  ' click here'
                )
              )
            )
          );
        }
      }

      if (this.props.searching && this.props.roots.count() > MAX_SEARCH_ROOTS) {
        return React.createElement(
          'div',
          { style: styles.container },
          this.props.roots.slice(0, MAX_SEARCH_ROOTS).map(function (id) {
            return React.createElement(Node, { key: id, id: id, depth: 0 });
          }).toJS(),
          React.createElement(
            'span',
            null,
            'Some results not shown. Narrow your search criteria to find them'
          )
        );
      }

      return React.createElement(
        'div',
        { style: styles.container },
        React.createElement(
          'div',
          { style: styles.scroll },
          this.props.roots.map(function (id) {
            return React.createElement(Node, { key: id, id: id, depth: 0 });
          }).toJS()
        ),
        React.createElement(Breadcrumb, null)
      );
    }
  }]);

  return TreeView;
})(React.Component);

TreeView.childContextTypes = {
  scrollTo: React.PropTypes.func };

var styles = {
  container: {
    fontFamily: 'Menlo, monospace',
    fontSize: '11px',
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    minHeight: 0,

    WebkitUserSelect: 'none',
    MozUserSelect: 'none',
    MsUserSelect: 'none',
    userSelect: 'none' },
  scroll: {
    padding: 3,
    overflow: 'auto',
    minHeight: 0,
    flex: 1 } };

var WrappedTreeView = decorate({
  listeners: function listeners(props) {
    return ['searchRoots', 'roots'];
  },
  props: function props(store, _props) {
    return {
      roots: store.searchRoots || store.roots,
      searching: !!store.searchRoots };
  } }, TreeView);

module.exports = WrappedTreeView;