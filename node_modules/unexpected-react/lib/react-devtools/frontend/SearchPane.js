/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 * $FLowFixMe
 * - thinks all react component classes must inherit from React.Component
 */
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var TreeView = require('./TreeView');
var PropTypes = React.PropTypes;

var decorate = require('./decorate');

var SearchPane = (function (_React$Component) {
  function SearchPane(props) {
    _classCallCheck(this, SearchPane);

    _get(Object.getPrototypeOf(SearchPane.prototype), 'constructor', this).call(this, props);
    this.state = { focused: false };
  }

  _inherits(SearchPane, _React$Component);

  _createClass(SearchPane, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._key = this.onDocumentKeyDown.bind(this);
      var doc = React.findDOMNode(this).ownerDocument;
      // capture=true is needed to prevent chrome devtools console popping up
      doc.addEventListener('keydown', this._key, true);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var doc = React.findDOMNode(this).ownerDocument;
      doc.removeEventListener('keydown', this._key, true);
    }
  }, {
    key: 'onDocumentKeyDown',
    value: function onDocumentKeyDown(e) {
      if (e.keyCode === 191) {
        // forward slash
        var node = React.findDOMNode(this.input);
        var doc = React.findDOMNode(this).ownerDocument;
        if (doc.activeElement === node) {
          return;
        }
        node.focus();
        e.preventDefault();
      }
      if (e.keyCode === 27) {
        // escape
        if (!this.props.searchText && !this.state.focused) {
          return;
        }
        e.stopPropagation();
        e.preventDefault();
        this.cancel();
      }
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this.props.onChangeSearch('');
      React.findDOMNode(this.input).blur();
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(key) {
      if (key === 'Enter') {
        React.findDOMNode(this.input).blur();
        this.props.selectFirstSearchResult();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      var inputStyle = styles.input;
      if (this.props.searchText || this.state.focused) {
        inputStyle = _extends({}, inputStyle, styles.highlightedInput);
      }
      return React.createElement(
        'div',
        { style: styles.container },
        React.createElement(TreeView, { reload: this.props.reload }),
        React.createElement(
          'div',
          { style: styles.searchBox },
          React.createElement('input', {
            style: inputStyle,
            ref: function (i) {
              return _this.input = i;
            },
            value: this.props.searchText,
            onFocus: function () {
              return _this.setState({ focused: true });
            },
            onBlur: function () {
              return _this.setState({ focused: false });
            },
            onKeyDown: function (e) {
              return _this.onKeyDown(e.key);
            },
            placeholder: 'Search by Component Name',
            onChange: function (e) {
              return _this.props.onChangeSearch(e.target.value);
            }
          }),
          !!this.props.searchText && React.createElement(
            'div',
            { onClick: this.cancel.bind(this), style: styles.cancelButton },
            'Ã—'
          )
        )
      );
    }
  }]);

  return SearchPane;
})(React.Component);

SearchPane.propTypes = {
  reload: PropTypes.func,
  searchText: PropTypes.string,
  onChangeSearch: PropTypes.func,
  selectFirstSearchResult: PropTypes.func };

var Wrapped = decorate({
  listeners: function listeners(props) {
    return ['searchText'];
  },
  props: function props(store) {
    return {
      searchText: store.searchText,
      onChangeSearch: function onChangeSearch(text) {
        return store.changeSearch(text);
      },
      selectFirstSearchResult: store.selectFirstSearchResult.bind(store) };
  } }, SearchPane);

var styles = {
  container: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    minWidth: 0 },

  searchBox: {
    display: 'flex',
    flexShrink: 0,
    position: 'relative' },

  cancelButton: {
    fontSize: '13px',
    padding: '0 4px',
    borderRadius: '10px',
    height: '17px',
    position: 'absolute',
    cursor: 'pointer',
    right: '7px',
    top: '8px',
    color: 'white',
    backgroundColor: 'rgb(255, 137, 137)' },

  input: {
    flex: 1,
    fontSize: '18px',
    padding: '5px 10px',
    border: 'none',
    transition: 'border-top-color .2s ease, background-color .2s ease',
    borderTop: '1px solid #ccc',
    borderTopColor: '#ccc',
    outline: 'none' },

  highlightedInput: {
    borderTopColor: 'aqua',
    backgroundColor: '#EEFFFE' } };

module.exports = Wrapped;