/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var BlurInput = require('./BlurInput');
var DataView = require('./DataView/DataView');
var invariant = require('./invariant');

var decorate = require('./decorate');

var PropState = (function (_React$Component) {
  function PropState() {
    _classCallCheck(this, PropState);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(PropState, _React$Component);

  _createClass(PropState, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var _this = this;

      return {
        onChange: function onChange(path, val) {
          _this.props.onChange(path, val);
        } };
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (!this.props.node) {
        // TODO(jared): style this
        return React.createElement(
          'span',
          null,
          'No selection'
        );
      }

      var nodeType = this.props.node.get('nodeType');

      if (nodeType === 'Text') {
        if (this.props.canEditTextContent) {
          return React.createElement(
            'div',
            { style: styles.container },
            React.createElement(BlurInput, {
              value: this.props.node.get('text'),
              onChange: this.props.onChangeText
            })
          );
        }
        return React.createElement(
          'div',
          { style: styles.container },
          'Text node (no props/state)'
        );
      } else if (nodeType === 'Empty') {
        return React.createElement(
          'div',
          { style: styles.container },
          'Empty node (no props/state)'
        );
      }

      var editTextContent = null;
      if (this.props.canEditTextContent) {
        if (typeof this.props.node.get('children') === 'string') {
          editTextContent = React.createElement(BlurInput, {
            value: this.props.node.get('children'),
            onChange: this.props.onChangeText
          });
        }
      }

      var state = this.props.node.get('state');
      var context = this.props.node.get('context');
      var propsReadOnly = !this.props.node.get('canUpdate');

      return React.createElement(
        'div',
        { style: styles.container },
        React.createElement(
          'div',
          { style: styles.header },
          React.createElement(
            'span',
            { style: styles.headerName },
            '<',
            this.props.node.get('name'),
            '>'
          ),
          nodeType === 'Composite' && React.createElement(
            'span',
            { style: styles.consoleHint },
            '($r in the console)'
          )
        ),
        editTextContent,
        React.createElement(
          'div',
          { style: styles.section },
          React.createElement(
            'strong',
            null,
            'Props'
          ),
          propsReadOnly && React.createElement(
            'em',
            null,
            ' read-only'
          ),
          React.createElement(DataView, {
            path: ['props'],
            readOnly: propsReadOnly,
            inspect: this.props.inspect,
            showMenu: this.props.showMenu,
            key: this.props.id + '-props',
            data: this.props.node.get('props')
          })
        ),
        state && React.createElement(
          'div',
          { style: styles.section },
          React.createElement(
            'strong',
            null,
            'State'
          ),
          React.createElement(DataView, {
            data: state,
            path: ['state'],
            inspect: this.props.inspect,
            showMenu: this.props.showMenu,
            key: this.props.id + '-state'
          })
        ),
        context && React.createElement(
          'div',
          { style: styles.section },
          React.createElement(
            'strong',
            null,
            'Context'
          ),
          React.createElement(DataView, {
            data: context,
            path: ['context'],
            inspect: this.props.inspect,
            showMenu: this.props.showMenu,
            key: this.props.id + '-context'
          })
        ),
        this.props.extraPanes && this.props.extraPanes.map(function (fn) {
          return fn && fn(_this2.props.node, _this2.props.id);
        })
      );
    }
  }]);

  return PropState;
})(React.Component);

PropState.childContextTypes = {
  onChange: React.PropTypes.func };

var WrappedPropState = decorate({
  listeners: function listeners(props, store) {
    return ['selected', store.selected];
  },

  props: function props(store) {
    var node = store.selected ? store.get(store.selected) : null;
    return {
      id: store.selected,
      node: node,
      canEditTextContent: store.capabilities.editTextContent,
      onChangeText: function onChangeText(text) {
        store.changeTextContent(store.selected, text);
      },
      onChange: function onChange(path, val) {
        if (path[0] === 'props') {
          store.setProps(store.selected, path.slice(1), val);
        } else if (path[0] === 'state') {
          store.setState(store.selected, path.slice(1), val);
        } else if (path[0] === 'context') {
          store.setContext(store.selected, path.slice(1), val);
        } else {
          invariant(false, 'the path to change() must start wth props, state, or context');
        }
      },
      showMenu: function showMenu(e, val, path, name) {
        store.showContextMenu('attr', e, store.selected, node, val, path, name);
      },
      inspect: store.inspect.bind(store, store.selected) };
  } }, PropState);

var styles = {
  container: {
    padding: 3,
    fontSize: '11px',
    // TODO figure out what font Chrome devtools uses on Windows
    fontFamily: 'Menlo, Consolas, monospace',
    overflow: 'auto',
    flex: 1,
    display: 'flex',
    flexDirection: 'column',

    cursor: 'default',
    WebkitUserSelect: 'none',
    MozUserSelect: 'none',
    MsUserSelect: 'none',
    userSelect: 'none' },
  header: {
    flexShrink: 0 },
  headerName: {
    flex: 1,
    fontSize: 16,
    color: 'rgb(184, 0, 161)',

    cursor: 'text',
    WebkitUserSelect: 'text',
    MozUserSelect: 'text',
    MsUserSelect: 'text',
    userSelect: 'text' },
  section: {
    marginBottom: 10,
    flexShrink: 0 },
  globalButton: {
    cursor: 'pointer' },
  consoleHint: {
    float: 'right',
    fontSize: 11 } };

module.exports = WrappedPropState;