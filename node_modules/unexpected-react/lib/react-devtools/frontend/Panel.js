/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var Container = require('./Container');
var Store = require('./Store');
var keyboardNav = require('./keyboardNav');
var invariant = require('./invariant');
var assign = require('object-assign');

var Bridge = require('../agent/Bridge');
var NativeStyler = require('../plugins/ReactNativeStyle/ReactNativeStyle.js');
var RelayPlugin = require('../plugins/Relay/RelayPlugin');

var consts = require('../agent/consts');

var Panel = (function (_React$Component) {
  function Panel(props) {
    _classCallCheck(this, Panel);

    _get(Object.getPrototypeOf(Panel.prototype), 'constructor', this).call(this, props);
    this.state = { loading: true, isReact: this.props.alreadyFoundReact };
    this._unMounted = false;
    window.panel = this;
    this.plugins = [];
  }

  _inherits(Panel, _React$Component);

  _createClass(Panel, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        store: this._store };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this = this;

      if (this.props.alreadyFoundReact) {
        this.inject();
      } else {
        this.lookForReact();
      }

      if (this.props.reloadSubscribe) {
        this._unsub = this.props.reloadSubscribe(function () {
          return _this.reload();
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._unMounted = true;
      if (this._unsub) {
        this._unsub();
      }
    }
  }, {
    key: 'pauseTransfer',
    value: function pauseTransfer() {
      if (this._bridge) {
        this._bridge.pause();
      }
    }
  }, {
    key: 'resumeTransfer',
    value: function resumeTransfer() {
      if (this._bridge) {
        this._bridge.resume();
      }
    }
  }, {
    key: 'reload',
    value: function reload() {
      if (this._unsub) {
        this._unsub();
      }
      this.teardown();
      if (!this._unMounted) {
        this.setState({ loading: true }, this.props.reload);
      }
    }
  }, {
    key: 'getNewSelection',
    value: function getNewSelection() {
      if (!this._bridge || !this.props.getNewSelection) {
        return;
      }
      this.props.getNewSelection(this._bridge);
    }
  }, {
    key: 'hideHighlight',
    value: function hideHighlight() {
      this._store.hideHighlight();
    }
  }, {
    key: 'sendSelection',
    value: function sendSelection(id) {
      if (!this._bridge || !id && !this._store.selected) {
        return;
      }
      invariant(this.props.selectElement, 'cannot send selection if props.selectElement is not defined');
      // $FlowFixMe either id or this._store.selected is a string
      this.props.selectElement(id || this._store.selected, this._bridge);
    }
  }, {
    key: 'inspectComponent',
    value: function inspectComponent(vbl) {
      invariant(this.props.showComponentSource, 'cannot inspect component if props.showComponentSource is not supplied');
      this.props.showComponentSource(vbl || '$r');
    }
  }, {
    key: 'viewSource',
    value: function viewSource(id) {
      var _this2 = this;

      if (!this._bridge) {
        return;
      }
      this._bridge.send('putSelectedInstance', id);
      setTimeout(function () {
        invariant(_this2.props.showComponentSource, 'cannot view source if props.showComponentSource is not supplied');
        _this2.props.showComponentSource('__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst');
      }, 100);
    }
  }, {
    key: 'teardown',
    value: function teardown() {
      this.plugins.forEach(function (p) {
        return p.teardown();
      });
      this.plugins = [];
      if (this._keyListener) {
        window.removeEventListener('keydown', this._keyListener);
        this._keyListener = null;
      }
      if (this._bridge) {
        this._bridge.send('shutdown');
      }
      if (this._teardownWall) {
        this._teardownWall();
        this._teardownWall = null;
      }
    }
  }, {
    key: 'inject',
    value: function inject() {
      var _this3 = this;

      this.props.inject(function (wall, teardown) {
        _this3._teardownWall = teardown;

        _this3._bridge = new Bridge(wall);

        _this3._store = new Store(_this3._bridge);
        var refresh = function refresh() {
          return _this3.forceUpdate();
        };
        _this3.plugins = [new RelayPlugin(_this3._store, _this3._bridge, refresh)];
        _this3._keyListener = keyboardNav(_this3._store, window);

        window.addEventListener('keydown', _this3._keyListener);

        _this3._store.on('connected', function () {
          _this3.setState({ loading: false });
          _this3.getNewSelection();
        });
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _this4 = this;

      if (!this.state.isReact) {
        if (!this._checkTimeout) {
          this._checkTimeout = setTimeout(function () {
            _this4._checkTimeout = null;
            _this4.lookForReact();
          }, 200);
        }
      }
    }
  }, {
    key: 'lookForReact',
    value: function lookForReact() {
      var _this5 = this;

      this.props.checkForReact(function (isReact) {
        if (isReact) {
          _this5.setState({ isReact: true, loading: true });
          _this5.inject();
        } else {
          console.log('still looking...');
          _this5.setState({ isReact: false, loading: false });
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _ref,
          _this6 = this;

      if (this.state.loading) {
        return React.createElement(
          'div',
          { style: styles.loading },
          React.createElement(
            'h1',
            null,
            'Connecting to React...'
          ),
          React.createElement('br', null),
          'If this is React Native, you need to interact with the app (just tap the screen) in order to establish the bridge.'
        );
      }
      if (!this.state.isReact) {
        return React.createElement(
          'div',
          { style: styles.loading },
          React.createElement(
            'h1',
            null,
            'Looking for react...'
          )
        );
      }
      var extraTabs = assign.apply(null, [{}].concat(this.plugins.map(function (p) {
        return p.tabs();
      })));
      var extraPanes = (_ref = []).concat.apply(_ref, _toConsumableArray(this.plugins.map(function (p) {
        return p.panes();
      })));
      if (this._store.capabilities.rnStyle) {
        extraPanes.push(panelRNStyle(this._bridge));
      }
      return React.createElement(Container, {
        reload: this.props.reload && this.reload.bind(this),
        menuItems: {
          attr: function attr(id, node, val, path, name) {
            if (!val || node.get('nodeType') !== 'Composite' || val[consts.type] !== 'function') {
              return undefined;
            }
            return [_this6.props.showAttrSource && {
              title: 'Show Source',
              // $FlowFixMe showAttrSource is provided
              action: function action() {
                return _this6.props.showAttrSource(path);
              } }, _this6.props.executeFn && {
              title: 'Execute function',
              // $FlowFixMe executeFn is provided
              action: function action() {
                return _this6.props.executeFn(path);
              } }];
          },
          tree: function tree(id, node) {
            return [_this6.props.showComponentSource && node.get('nodeType') === 'Composite' && {
              title: 'Show Source',
              action: function action() {
                return _this6.viewSource(id);
              } }, _this6.props.selectElement && _this6._store.capabilities.dom && {
              title: 'Show in Elements Pane',
              action: function action() {
                return _this6.sendSelection(id);
              } }];
          } },
        extraPanes: extraPanes,
        extraTabs: extraTabs
      });
    }
  }]);

  return Panel;
})(React.Component);

Panel.childContextTypes = {
  store: React.PropTypes.object };

var panelRNStyle = function panelRNStyle(bridge) {
  return function (node, id) {
    var props = node.get('props');
    if (!props || !props.style) {
      return React.createElement(
        'strong',
        null,
        'No style'
      );
    }
    return React.createElement(
      'div',
      null,
      React.createElement(
        'h3',
        null,
        'React Native Style Editor'
      ),
      React.createElement(NativeStyler, { id: id, bridge: bridge })
    );
  };
};

var styles = {
  chromePane: {
    display: 'flex' },
  stretch: {
    flex: 1 },
  loading: {
    textAlign: 'center',
    color: '#888',
    padding: 30,
    flex: 1 } };

module.exports = Panel;

// optionals