/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var assign = require('object-assign');

var decorate = require('./decorate');
var Props = require('./Props');

var Node = (function (_React$Component) {
  function Node() {
    _classCallCheck(this, Node);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(Node, _React$Component);

  _createClass(Node, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return nextProps !== this.props;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.selected) {
        this.ensureInView();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.selected && !prevProps.selected) {
        this.ensureInView();
      }
    }
  }, {
    key: 'ensureInView',
    value: function ensureInView() {
      var node = this.props.isBottomTagSelected ? this._tail : this._head;
      if (!node) {
        return;
      }
      var domnode = React.findDOMNode(node);
      this.context.scrollTo(domnode.offsetTop, domnode.offsetHeight);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      var node = this.props.node;
      if (!node) {
        return React.createElement(
          'span',
          null,
          'Node was deleted'
        );
      }
      var children = node.get('children');

      if (node.get('nodeType') === 'Wrapper') {
        return React.createElement(WrappedNode, { id: children[0], depth: this.props.depth });
      }

      if (node.get('nodeType') === 'NativeWrapper') {
        children = this.props.wrappedChildren;
      }

      var collapsed = node.get('collapsed');

      var leftPad = {
        paddingLeft: (this.props.depth + 1) * 10 };
      var headStyles = assign({}, styles.head, this.props.hovered && styles.headHover, this.props.selected && (collapsed || !this.props.isBottomTagSelected) && styles.headSelect, leftPad);

      var tagEvents = {
        onMouseOver: function onMouseOver() {
          return _this.props.onHover(true);
        },
        onMouseOut: function onMouseOut() {
          return _this.props.onHover(false);
        },
        onContextMenu: this.props.onContextMenu,
        onDoubleClick: this.props.onToggleCollapse,
        onMouseDown: this.props.onSelect };

      var nodeType = node.get('nodeType');
      if (nodeType === 'Text' || nodeType === 'Empty') {
        var tag;
        if (nodeType === 'Text') {
          var text = node.get('text');
          tag = React.createElement(
            'span',
            { style: styles.tagText },
            React.createElement(
              'span',
              { style: styles.openTag },
              '"'
            ),
            React.createElement(
              'span',
              { style: styles.textContent },
              text
            ),
            React.createElement(
              'span',
              { style: styles.closeTag },
              '"'
            )
          );
        } else if (nodeType === 'Empty') {
          tag = React.createElement(
            'span',
            { style: styles.tagText },
            React.createElement(
              'span',
              { style: styles.falseyLiteral },
              'null'
            )
          );
        }
        return React.createElement(
          'div',
          { style: styles.container },
          React.createElement(
            'div',
            _extends({ style: headStyles, ref: function (h) {
                return _this._head = h;
              } }, tagEvents),
            tag
          )
        );
      }

      var isCustom = nodeType === 'Composite';

      var tagStyle = isCustom ? styles.customTagName : styles.tagName;

      // Single-line tag (collapsed / simple content / no content)
      if (!children || typeof children === 'string' || !children.length) {
        var name = node.get('name');
        var content = children;
        return React.createElement(
          'div',
          { style: styles.container },
          React.createElement(
            'div',
            _extends({ style: headStyles, ref: function (h) {
                return _this._head = h;
              } }, tagEvents),
            React.createElement(
              'span',
              { style: styles.tagText },
              React.createElement(
                'span',
                { style: styles.openTag },
                React.createElement(
                  'span',
                  { style: tagStyle },
                  '<',
                  name
                ),
                node.get('props') && React.createElement(Props, { props: node.get('props') }),
                !content && '/',
                React.createElement(
                  'span',
                  { style: tagStyle },
                  '>'
                )
              ),
              content && [React.createElement(
                'span',
                { key: 'content', style: styles.textContent },
                content
              ), React.createElement(
                'span',
                { key: 'close', style: styles.closeTag },
                React.createElement(
                  'span',
                  { style: tagStyle },
                  '</',
                  name,
                  '>'
                )
              )]
            )
          )
        );
      }

      // Plain string
      if (typeof children === 'string') {
        return React.createElement(
          'div',
          { style: leftPad },
          children
        );
      }

      var closeTag = React.createElement(
        'span',
        { style: styles.closeTag },
        React.createElement(
          'span',
          { style: tagStyle },
          '</',
          '' + node.get('name'),
          '>'
        )
      );

      var hasState = !!node.get('state') || !!node.get('context');

      var collapserStyle = assign({}, styles.collapser, { left: leftPad.paddingLeft - 12 }, isCustom && styles.customCollapser, hasState && {
        color: 'red' });

      var head = React.createElement(
        'div',
        _extends({ ref: function (h) {
            return _this._head = h;
          }, style: headStyles }, tagEvents),
        React.createElement(
          'span',
          {
            title: hasState && 'This component has state',
            onClick: this.props.onToggleCollapse, style: collapserStyle
          },
          node.get('collapsed') ? React.createElement(
            'span',
            null,
            '▶'
          ) : React.createElement(
            'span',
            null,
            '▼'
          )
        ),
        React.createElement(
          'span',
          { style: styles.tagText },
          React.createElement(
            'span',
            { style: styles.openTag },
            React.createElement(
              'span',
              { style: tagStyle },
              '<',
              '' + node.get('name')
            ),
            node.get('props') && React.createElement(Props, { props: node.get('props') }),
            React.createElement(
              'span',
              { style: tagStyle },
              '>'
            )
          ),
          collapsed && '…',
          collapsed && closeTag
        )
      );

      if (collapsed) {
        return React.createElement(
          'div',
          { style: styles.container },
          head
        );
      }

      var tailStyles = assign({}, styles.tail, this.props.hovered && styles.headHover, this.props.selected && this.props.isBottomTagSelected && styles.headSelect, leftPad);

      return React.createElement(
        'div',
        { style: styles.container },
        head,
        React.createElement(
          'div',
          { style: styles.children },
          children.map(function (id) {
            return React.createElement(WrappedNode, { key: id, depth: _this.props.depth + 1, id: id });
          })
        ),
        React.createElement(
          'div',
          _extends({ ref: function (t) {
              return _this._tail = t;
            }, style: tailStyles }, tagEvents, { onMouseDown: this.props.onSelectBottom }),
          closeTag
        )
      );
    }
  }]);

  return Node;
})(React.Component);

Node.contextTypes = {
  scrollTo: React.PropTypes.func };

var WrappedNode = decorate({
  listeners: function listeners(props) {
    return [props.id];
  },
  props: function props(store, _props) {
    var node = store.get(_props.id);
    var wrappedChildren = null;
    if (node && node.get('nodeType') === 'NativeWrapper') {
      var child = store.get(node.get('children')[0]);
      wrappedChildren = child && child.get('children');
    }
    return {
      node: node,
      wrappedChildren: wrappedChildren,
      selected: store.selected === _props.id,
      isBottomTagSelected: store.isBottomTagSelected,
      hovered: store.hovered === _props.id,
      onToggleCollapse: function onToggleCollapse(e) {
        e.preventDefault();
        store.toggleCollapse(_props.id);
      },
      onHover: function onHover(isHovered) {
        return store.setHover(_props.id, isHovered);
      },
      onSelect: function onSelect(e) {
        store.selectTop(_props.id);
      },
      onSelectBottom: function onSelectBottom(e) {
        store.selectBottom(_props.id);
      },
      onContextMenu: function onContextMenu(e) {
        store.showContextMenu('tree', e, _props.id, node);
      } };
  },
  shouldUpdate: function shouldUpdate(nextProps, prevProps) {
    return nextProps.id !== prevProps.id;
  } }, Node);

var styles = {
  // TODO(jared): how do people feel about empty style rules? I put them here
  // in case we need them later, and the corresponding divs refernce them. But
  // I could remove them if desired.
  container: {},

  children: {},

  textContent: {},

  falseyLiteral: {
    fontStyle: 'italic' },

  closeTag: {},

  head: {
    cursor: 'pointer',
    position: 'relative',
    display: 'flex' },

  tail: {
    cursor: 'pointer' },

  tagName: {
    color: 'rgb(120, 120, 120)' },

  customTagName: {
    color: 'rgb(136, 18, 128)' },

  openTag: {},

  tagText: {
    flex: 1,
    whiteSpace: 'nowrap' },

  headSelect: {
    backgroundColor: '#ccc' },

  collapser: {
    fontSize: 7,
    color: '#aaa',
    marginRight: 3,
    position: 'absolute',
    padding: 2 },

  customCollapser: {
    color: '#555',
    fontSize: 9 },

  headHover: {
    backgroundColor: '#eee' } };

module.exports = WrappedNode;