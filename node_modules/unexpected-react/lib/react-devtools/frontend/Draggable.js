/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');

var Draggable = (function (_React$Component) {
  function Draggable() {
    _classCallCheck(this, Draggable);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(Draggable, _React$Component);

  _createClass(Draggable, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._onMove = this.onMove.bind(this);
      this._onUp = this.onUp.bind(this);
    }
  }, {
    key: '_startDragging',
    value: function _startDragging(evt) {
      evt.preventDefault();
      var doc = React.findDOMNode(this).ownerDocument;
      doc.addEventListener('mousemove', this._onMove);
      doc.addEventListener('mouseup', this._onUp);
      this.props.onStart();
    }
  }, {
    key: 'onMove',
    value: function onMove(evt) {
      evt.preventDefault();
      this.props.onMove(evt.pageX, evt.pageY);
    }
  }, {
    key: 'onUp',
    value: function onUp(evt) {
      evt.preventDefault();
      var doc = React.findDOMNode(this).ownerDocument;
      doc.removeEventListener('mousemove', this._onMove);
      doc.removeEventListener('mouseup', this._onUp);
      this.props.onStop();
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', {
        style: this.props.style,
        onMouseDown: this._startDragging.bind(this)
      });
    }
  }]);

  return Draggable;
})(React.Component);

module.exports = Draggable;