/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * A Kitchen Sink of examples
 *
 */
'use strict';

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var React = require('react/addons');
var assign = require('object-assign');

// Different test things

var LongRender = (function () {
  function LongRender() {
    _classCallCheck(this, LongRender);
  }

  _createClass(LongRender, [{
    key: 'render',
    value: function render() {
      var t = Date.now();
      while (Date.now() - t < 50) {}
      return React.createElement(
        'div',
        null,
        'That took a long time'
      );
    }
  }]);

  return LongRender;
})();

var DeepTree = (function () {
  function DeepTree() {
    _classCallCheck(this, DeepTree);
  }

  _createClass(DeepTree, [{
    key: 'render',
    value: function render() {
      var child = React.createElement(
        'span',
        null,
        'At the bottom'
      );
      for (var i = 0; i < 20; i++) {
        child = React.createElement(
          'span',
          null,
          '(',
          i,
          child
        );
      }
      return child;
    }
  }]);

  return DeepTree;
})();

var Nester = (function (_React$Component) {
  function Nester(props) {
    _classCallCheck(this, Nester);

    _get(Object.getPrototypeOf(Nester.prototype), 'constructor', this).call(this, props);
    this.state = {};
  }

  _inherits(Nester, _React$Component);

  _createClass(Nester, [{
    key: 'render',
    value: function render() {
      var _this = this;

      var depth = this.props.depth || 0;
      if (depth > 10) {
        return React.createElement(
          'span',
          null,
          'bottom'
        );
      }
      return React.createElement(
        'div',
        null,
        React.createElement(
          'button',
          { onClick: function () {
              return _this.setState({ click: 1 });
            } },
          'Rerender'
        ),
        React.createElement(Nester, { depth: depth + 1 }),
        React.createElement(Nester, { depth: depth + 1 })
      );
    }
  }]);

  return Nester;
})(React.Component);

var SymbolProp = (function () {
  function SymbolProp() {
    _classCallCheck(this, SymbolProp);
  }

  _createClass(SymbolProp, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        { sym: Symbol('name') },
        'This tests that dehydration + inspection works with symbols',
        Symbol('child')
      );
    }
  }]);

  return SymbolProp;
})();

var BadUnmount = (function () {
  function BadUnmount() {
    _classCallCheck(this, BadUnmount);
  }

  _createClass(BadUnmount, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        null,
        React.createElement(
          'button',
          null,
          'Make a bad unmount'
        ),
        React.createElement(
          'button',
          null,
          'Clean things up'
        )
      );
    }
  }]);

  return BadUnmount;
})();

var Mounty = (function () {
  function Mounty() {
    _classCallCheck(this, Mounty);
  }

  _createClass(Mounty, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        'h1',
        null,
        this.props.name,
        ' ',
        this.props.val
      );
    }
  }]);

  return Mounty;
})();

var LotsOfMounts = (function () {
  function LotsOfMounts() {
    _classCallCheck(this, LotsOfMounts);
  }

  _createClass(LotsOfMounts, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.roots = [];
      this.make('Rock');
      this.make('Solid');
      this.mounty('One');
      this.mounty('Two');
      this.mounty('Three');
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.roots.forEach(function (div) {
        return React.unmountComponentAtNode(div);
      });
    }
  }, {
    key: 'make',
    value: function make(name) {
      var node = React.findDOMNode(this.node);
      if (!node) {
        return null;
      }
      var val = Math.random().toString(15).slice(0, 20);
      var div = document.createElement('div');

      node.appendChild(div);
      this.roots.push(div);
      React.render(React.createElement(Mounty, { name: name, val: val }), div);
      return div;
    }
  }, {
    key: 'mounty',
    value: function mounty(name) {
      var _this2 = this;

      var div = this.make(name);
      if (!div) {
        return;
      }
      setTimeout(function () {
        if (_this2.roots.indexOf(div) === -1) {
          return;
        }
        React.unmountComponentAtNode(div);
        var ix = _this2.roots.indexOf(div);
        _this2.roots.splice(ix, 1);
        _this2.mounty(name);
      }, Math.random() * 1000 + 1000);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return React.createElement('div', { ref: function (node) {
          return _this3.node = node;
        } });
    }
  }]);

  return LotsOfMounts;
})();

// Render the list of tests

var Sink = (function () {
  function Sink() {
    _classCallCheck(this, Sink);
  }

  _createClass(Sink, [{
    key: 'render',
    value: function render() {
      var examples = {
        SymbolProp: SymbolProp,
        LongRender: LongRender,
        DeepTree: DeepTree,
        BadUnmount: BadUnmount,
        Nester: Nester,
        LotsOfMounts: LotsOfMounts };

      var view = function view(Comp) {
        return run(View, { Comp: Comp });
      };

      return React.createElement(
        'ul',
        { style: styles.sinkList },
        Object.keys(examples).map(function (name) {
          return React.createElement(
            'li',
            { onClick: function () {
                return view(examples[name]);
              } },
            React.createElement(
              HighlightHover,
              { style: styles.sinkItem },
              name
            )
          );
        })
      );
    }
  }]);

  return Sink;
})();

var HighlightHover = (function (_React$Component2) {
  function HighlightHover(props) {
    _classCallCheck(this, HighlightHover);

    _get(Object.getPrototypeOf(HighlightHover.prototype), 'constructor', this).call(this, props);
    this.state = { hover: null };
  }

  _inherits(HighlightHover, _React$Component2);

  _createClass(HighlightHover, [{
    key: 'isMe',
    value: function isMe(evt) {
      var node = React.findDOMNode(this.node);
      return evt.target === node;
    }
  }, {
    key: 'onOver',
    value: function onOver(evt) {
      if (!this.isMe(evt)) {
        return;
      }
      this.setState({ hover: true });
    }
  }, {
    key: 'onOut',
    value: function onOut(evt) {
      if (!this.isMe(evt)) {
        return;
      }
      this.setState({ hover: false });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var style = this.props.style;
      if (this.state.hover) {
        style = assign({}, style, {
          backgroundColor: '#eee' });
      }

      return React.createElement(
        'div',
        {
          ref: function (d) {
            return _this4.node = d;
          },
          onMouseOver: this.onOver.bind(this),
          onMouseOut: this.onOut.bind(this),
          style: style
        },
        this.props.children
      );
    }
  }]);

  return HighlightHover;
})(React.Component);

var View = (function () {
  function View() {
    _classCallCheck(this, View);
  }

  _createClass(View, [{
    key: 'render',
    value: function render() {
      var Comp = this.props.Comp;
      return React.createElement(
        'div',
        null,
        React.createElement(
          'button',
          { onClick: function () {
              return run(Sink);
            } },
          'Back to Sink'
        ),
        React.createElement(Comp, null)
      );
    }
  }]);

  return View;
})();

function run(Comp, props) {
  props = props || {};
  React.unmountComponentAtNode(node);
  React.render(React.createElement(Comp, props), node);
}

var node = document.createElement('div');
document.body.appendChild(node);

var styles = {};

window.React = React;

run(Sink);