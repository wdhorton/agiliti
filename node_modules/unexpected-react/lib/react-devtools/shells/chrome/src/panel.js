/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @flow
 */
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* global chrome */

var checkForReact = require('./checkForReact');
var _inject = require('./inject');

var config = {
  reload: reload,
  checkForReact: checkForReact,
  alreadyFoundReact: false,
  reloadSubscribe: function reloadSubscribe(reloadFn) {
    chrome.devtools.network.onNavigated.addListener(reloadFn);
    return function () {
      chrome.devtools.network.onNavigated.removeListener(reloadFn);
    };
  },
  getNewSelection: function getNewSelection(bridge) {
    chrome.devtools.inspectedWindow.eval('window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0 = $0');
    bridge.send('checkSelection');
  },
  selectElement: function selectElement(id, bridge) {
    bridge.send('putSelectedNode', id);
    setTimeout(function () {
      chrome.devtools.inspectedWindow.eval('inspect(window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node)');
    }, 100);
  },
  showComponentSource: function showComponentSource(vbl) {
    // if it is an es6 class-based component, (isMounted throws), then inspect
    // the constructor. Otherwise, inspect the render function.
    var code = 'Object.getOwnPropertyDescriptor(window.' + vbl + '.__proto__.__proto__, \'isMounted\') &&\n      Object.getOwnPropertyDescriptor(window.' + vbl + '.__proto__.__proto__, \'isMounted\').value ?\n        inspect(window.' + vbl + '.render) : inspect(window.' + vbl + '.constructor)';
    chrome.devtools.inspectedWindow.eval(code, function (res, err) {
      if (err) {
        console.error('Failed to inspect component', err);
      }
    });
  },
  showAttrSource: function showAttrSource(path) {
    var attrs = '[' + path.map(function (m) {
      return JSON.stringify(m);
    }).join('][') + ']';
    var code = 'inspect(window.$r' + attrs + ')';
    chrome.devtools.inspectedWindow.eval(code, function (res, err) {
      if (err) {
        console.error('Failed to inspect source', err);
      }
    });
  },
  executeFn: function executeFn(path) {
    var attrs = '[' + path.map(function (m) {
      return JSON.stringify(m);
    }).join('][') + ']';
    var code = 'window.$r' + attrs + '()';
    chrome.devtools.inspectedWindow.eval(code, function (res, err) {
      if (err) {
        console.error('Failed to call function', err);
      }
    });
  },
  inject: function inject(done) {
    _inject(chrome.runtime.getURL('build/backend.js'), function () {
      var port = chrome.runtime.connect({
        name: '' + chrome.devtools.inspectedWindow.tabId });
      var disconnected = false;

      var wall = {
        listen: function listen(fn) {
          port.onMessage.addListener(function (message) {
            return fn(message);
          });
        },
        send: function send(data) {
          if (disconnected) {
            return;
          }
          port.postMessage(data);
        } };

      port.onDisconnect.addListener(function () {
        disconnected = true;
      });
      done(wall, function () {
        return port.disconnect();
      });
    });
  } };

var globalHook = require('../../../backend/GlobalHook');
globalHook(window);
var Panel = require('../../../frontend/Panel');
var React = require('react');

var node = document.getElementById('container');

function reload() {
  setTimeout(function () {
    React.unmountComponentAtNode(node);
    node.innerHTML = '';
    React.render(React.createElement(Panel, config), node);
  }, 100);
}

React.render(React.createElement(Panel, _extends({ alreadyFoundReact: true }, config)), node);